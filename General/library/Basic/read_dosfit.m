%READ_DOSFIT read .fit files
%
%   This functions reads .fit files generated by StepX
%
%   Input:
%   read_dosfit(fn)
%       fn :    File name. E.g fn = 'perip_ga_LE201012_5.0_.fit';
%
%   Output:
%   S=read_dosfit(..)
%       S :     Structure with values read from file
%
%   TvG Aug 2017


function S=read_dosfit(fn)

%%
% col1: tag in file (regexp format)
% col2: field in structure
Tags={
    'Data file:'                    'in'
    'Data:'                         'perf'
    'Chance [0-9]'                  'chancein'
    'Asymptote [0-9]'               'asymptotein'
    'Log transform'                 'logtransf'
    'Start values:'                 'start'
    'Start steps:'                  'startstep'
    'Maximum error:'                'maxerr'
    'Starting simplex'              'simplex'
    'The final simplex is:'         'finalsimplex'
    'Means:'                        'params'
    'Fractional errors:'            'err'
    'Fit:'                          'fitvalues'
    'Median:'                       'median'
    'Standard deviation \(log\):'   'logsd'
    'Chance performance:'           'chance'
    'Asymptotic performance:'       'asymptote'
    'Chi-square: '                  'chisq'
    'Standard error \(log\):'       'logse'
    'Median \+\/- SE:'              'sebounds'
    'Fiducial limits \(95\%\):'     'fiducial95'
    'Confidence value \(g\):'       'confidence'
    };

%%
fid=fopen(fn,'r');

OK = true;
while OK
    
    L = fgetl(fid);
    
    if ~isempty(L) && isnumeric(L)
        OK = false;
        continue
    end
    
    ixTag = find(cellfun(@(t) ~isempty(regexp(L,['^' t], 'once')),Tags(:,1)));
    
    if ismember(ixTag,find(ismember(Tags(:,2),{'in' 'median' 'logsd' 'chance' 'asymptote' 'chisq' 'logse' 'sebounds' 'fiducial95' 'confidence'})))
        val = pTcV(L);
        S.(Tags{ixTag,2}) = val{:};
    elseif ismember(ixTag,find(ismember(Tags(:,2),{'chancein' 'asymptotein'})))
        val = pTV(L);
        S.(Tags{ixTag,2}) = val{:};
    elseif ismember(ixTag,find(ismember(Tags(:,2),{'start' 'startstep' 'maxerr' 'params' 'err'})))
        val = pTcnlV(fid);
        S.(Tags{ixTag,2}) = val{:};
    elseif ismember(ixTag,find(ismember(Tags(:,2),{'perf' 'fitvalues'})))
        [S.(Tags{ixTag,2}).ColName,S.(Tags{ixTag,2}).mtx] = pMTX(fid);
    elseif ismember(ixTag,find(ismember(Tags(:,2),{'logtransf'})))
        S.(Tags{ixTag,2}) = true; % just a flag
        L = fgetl(fid); % asume there is always a new line after flag
    elseif ismember(ixTag,find(ismember(Tags(:,2),{'simplex'})))
        % stop reading after encountering n new lines
        nNL = 3;
        c=0;
        str = {};
        while c<nNL
            L = fgetl(fid);
            if isempty(L)
                str = [str ; {''}];
                c=c+1;
                continue
            end
            str = [str;L];
        end
        S.(Tags{ixTag,2}) = char(str);
    else
        keyboard
    end
    
    % skip line? another newline at the end?
    if ismember(ixTag,find(ismember(Tags(:,2),{'in' 'asymptotein' 'perf'})))
        L = fgetl(fid);
    end
    
    % make numerical from string
    if ismember(ixTag,find(ismember(Tags(:,2),{'chancein' 'asymptotein' 'start' 'startstep' 'maxerr' 'params' 'err' 'median' 'chance' 'asymptote' 'sebounds' 'fiducial95' 'confidence'})))
        val = textscan(S.(Tags{ixTag,2}),'%f');
        S.(Tags{ixTag,2}) = val{1};
    end
    
    % parse std
    if ismember(ixTag,find(ismember(Tags(:,2),{'logsd'})))
        val=regexp(S.(Tags{ixTag,2}),'([0-9\.]+) Beta: ([0-9\.]+)','tokens');
        if numel(val)~=1 || numel([val{:}])~=2
            error([mfilename ':parse'],'something went wrong when parsing line:\n\t%s',L);fclose(fid)
        end
        val=str2double(val{1});
        S=rmfield(S,Tags{ixTag,2});
        S.(Tags{ixTag,2}).val = val(1);
        S.(Tags{ixTag,2}).beta = val(2);
    end

    % parse chi sq
    if ismember(ixTag,find(ismember(Tags(:,2),{'chisq'})))
        val=regexp(S.(Tags{ixTag,2}),'([0-9\.]+) df ([0-9\.]+)','tokens');
        if numel(val)~=1 || numel([val{:}])~=2
            error([mfilename ':parse'],'something went wrong when parsing line:\n\t%s',L);fclose(fid)
        end
        val=str2double(val{1});
        S=rmfield(S,Tags{ixTag,2});
        S.(Tags{ixTag,2}).val = val(1);
        S.(Tags{ixTag,2}).df = val(2);
    end

    % parse se
    if ismember(ixTag,find(ismember(Tags(:,2),{'logse'})))
        val=regexp(S.(Tags{ixTag,2}),'([0-9\.]+) \([ ]*([0-9\.]+)\%\)','tokens');
        if numel(val)~=1 || numel([val{:}])~=2
            error([mfilename ':parse'],'something went wrong when parsing line:\n\t%s',L);fclose(fid)
        end
        val=str2double(val{1});
        S=rmfield(S,Tags{ixTag,2});
        S.(Tags{ixTag,2}).val = val(1);
        S.(Tags{ixTag,2}).frac = val(2);
    end
end
fclose(fid);

end

%% pTcV
%   parse Tag: Val (tag - colon - val)
function val=pTcV(L)
val = regexp(L,'.*?:[ ]+(.*)$','tokens');
if numel(val)~=1 || numel([val{:}])~=1
    error([mfilename ':parse'],'something went wrong when parsing line:\n\t%s',L);fclose(fid)
end
val = val{1};
end

%% pTV
%   parse Tag Val (tag -space- val)
function val=pTV(L)
val = regexp(L,'.*?[ ]+(.*)$','tokens');
if numel(val)~=1 || numel([val{:}])~=1
    error([mfilename ':parse'],'something went wrong when parsing line:\n\t%s',L);fclose(fid)
end
val = val{1};
end

%% pTcnlV
%   parse Tag:<CR> Val (tag - colon - new line - val)
function val=pTcnlV(fid)
L=fgetl(fid);
val = regexp(L,'^[ ]+(.*)$','tokens');
if numel(val)~=1 || numel([val{:}])~=1
    error([mfilename ':parse'],'something went wrong when parsing line:\n\t%s',L);fclose(fid)
end
val = val{1};
end

%% pMTX
%   parse matrix
%   Starts with header line, ends with empty line
function [H,mtx]=pMTX(fid)
L = fgetl(fid);
val=textscan(L,'%s');
if numel(val)~=1
    error([mfilename ':parse'],'something went wrong when parsing line:\n\t%s',L);fclose(fid)
end
H = val{1}';
nCol = numel(H);
c = 0;
OK = true;
mtx = nan(1,nCol);
while OK
    L = fgetl(fid);
    if isempty(L)
        OK=false;
        continue
    end
    val = textscan(L,'%f'); % asume matrix always has numeric values
    if numel(val)~=1 || numel([val{:}])~=nCol
        error([mfilename ':parse'],'something went wrong when parsing line:\n\t%s',L);fclose(fid)
    end
    c=c+1;
    mtx(c,:) = val{1}';
end
end
