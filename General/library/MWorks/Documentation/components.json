{"Folder": {"name": "Folder", "signature": "folder", "mwel_alias": ["group"], "group": ["Variables"], "transient": true, "toplevel": true, "allowed_child": ["Selection Variable", "Sound Stimulus", "Calibrator", "Stimulus Group", "Resource", "Stimulus", "Filter", "IODevice", "Replicator", "Optimizer", "Variable"], "description": "A folder for (purely) organizational purposes.  Variables defined in a folder will be displayed as an expandable group in MWClient's variables window.\n", "basename": "folder", "isa": ["Folder"]}, "Variable": {"name": "Variable", "signature": "variable", "mwel_alias": ["var"], "group": ["Variables"], "toplevel": true, "allowed_child": ["Action"], "description": "A general-purpose variable, used to store experiment parameters, collect results, and mediate the transfer of data between components\n", "parameters": [{"name": "default_value", "required": true, "example": 0, "description": "Initial value assigned to the variable when the experiment is loaded\n"}, {"name": "type", "options": ["any", "boolean", "integer", "float", "string", "list"], "default": "any", "deprecated": true, "description": "Controls how the content of `default_value`_ is interpreted.  When set to ``any`` (recommended), the default value is parsed like a normal expression, and the parser infers its type.\n"}, {"name": "scope", "options": ["global", "local"], "default": "global", "description": "Controls the visibility of changes made to the variable's value.\n\nIf a variable has local scope, then changes to its value are visible\nonly within the `paradigm component <Paradigm Components>` in which the\nassignment was made.  These local changes persist between executions of\nthe paradigm component.\n\nIf a variable has global scope, changes to its value are visible\neverywhere.\n"}, {"name": "logging", "options": ["never", "when_changed"], "default": "when_changed", "description": "Determines when the variable's value is written to the event stream (and thereby the data file)\n"}, {"name": "persistant", "default": "NO", "description": "If ``YES``, then the variable's value is included in saved variable sets created via MWClient\n"}, {"name": "exclude_from_data_file", "default": "NO", "description": "If ``YES``, then the variable's value is *not* written to the data file. Other event stream listeners (e.g. MWClient, client- and server-side conduits) continue to receive its value.\n"}, {"name": "groups", "description": "Comma-separated list containing the names of groups to which the variable belongs.  Variable groups are displayed as expandable sections in MWClient's variables window.\n"}], "basename": "variable", "isa": ["Variable"]}, "Selectable": {"name": "Selectable", "abstract": true, "parameters": [{"name": "selection", "options": ["sequential", "sequential_ascending", "sequential_descending", "random_without_replacement", "random_with_replacement"], "default": "sequential", "description": "Order in which to draw selections"}, {"name": "nsamples", "default": 1, "description": "Number of samples to allow before `Reset Selections` is required\n"}, {"name": "sampling_method", "options": ["cycles", "samples"], "default": "cycles", "description": "Controls the interpretation of `nsamples`_.  If set to ``cycles``, *all* possible selections must be made to complete one sample.  If set to ``samples``, each individual selection counts as a sample.\n"}], "basename": "selectable", "group": [], "isa": ["Selectable"], "allowed_child": []}, "Selection Variable": {"name": "Selection Variable", "signature": "variable/selection", "isa": ["Selection Variable", "Selectable"], "group": ["Variables"], "toplevel": true, "description": "A variable whose current value is drawn from a list of possible values.  The order and number of selected values are determined by `selection`_, `nsamples`_, and `sampling_method`_.  Use `Next Selection` to advance to the next value.\n", "parameters": [{"name": "values", "required": true, "description": "Comma-separated list of values from which the variable's current value is drawn.  May include :ref:`range expressions <Range Expressions>`.\n"}, {"name": "advance_on_accept", "default": "NO", "description": "If ``YES``, `Accept Selections` will automatically invoke `Next Selection` (unless all selections have been exhausted)\n"}, {"name": "autoreset", "default": "NO", "description": "If ``YES``, `Reset Selections` will be invoked automatically when all selections have been exhausted\n"}, {"name": "groups", "description": "Comma-separated list containing the names of groups to which the variable belongs.  Variable groups are displayed as expandable sections in MWClient's variables window.\n"}, {"name": "selection", "options": ["sequential", "sequential_ascending", "sequential_descending", "random_without_replacement", "random_with_replacement"], "default": "sequential", "description": "Order in which to draw selections"}, {"name": "nsamples", "default": 1, "description": "Number of samples to allow before `Reset Selections` is required\n"}, {"name": "sampling_method", "options": ["cycles", "samples"], "default": "cycles", "description": "Controls the interpretation of `nsamples`_.  If set to ``cycles``, *all* possible selections must be made to complete one sample.  If set to ``samples``, each individual selection counts as a sample.\n"}], "basename": "selection_variable", "allowed_child": []}, "Variable Assignment": {"name": "Variable Assignment", "signature": "variable_assignment", "group": ["Variables"], "toplevel": true, "description": "Assigns a value to a variable.\n\nVariable assignments differ from `Assign Variable` actions in two key ways:\n\n1. They are allowed only at the top level of an experiment. They cannot be\n   declared inside a `Protocol` or other component.\n\n2. They are executed when the experiment loads, instead of at run time.  The\n   assignment takes place after `regular variables <Variable>` are created,\n   but before the creation of `selection variables <Selection Variable>` or\n   other components.\n\nIn MWEL, top-level `assignments <assignments>` are automatically converted\ninto variable assignments.\n", "parameters": [{"name": "variable", "required": true, "description": "Variable name"}, {"name": "value", "required": true, "description": "Value to assign"}, {"name": "type", "options": ["any", "boolean", "integer", "float", "string"], "default": "string", "recommended": "any", "description": "Controls how the content of `value`_ is interpreted.  When set to ``any``, the value is parsed like a normal expression, and the parser infers its type.\n"}], "basename": "variable_assignment", "isa": ["Variable Assignment"], "allowed_child": []}, "Stimulus": {"name": "Stimulus", "abstract": true, "group": ["Stimuli"], "toplevel": true, "parameters": [{"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}], "basename": "stimulus", "isa": ["Stimulus"], "allowed_child": []}, "Dynamic Stimulus Base": {"name": "Dynamic Stimulus Base", "abstract": true, "parameters": [{"name": "autoplay", "default": "NO", "description": "If ``YES``, the stimulus will start playing automatically (as if by an implicit `Play Dynamic Stimulus` action) after it has been `queued <Queue Stimulus>` and `Update Stimulus Display` has been invoked.  It will also stop playing automatically (as if by an implicit `Stop Dynamic Stimulus` action) after it has been `dequeued <Dequeue Stimulus>` and `Update Stimulus Display` is invoked.\n"}], "basename": "dynamic_stimulus_base", "group": [], "isa": ["Dynamic Stimulus Base"], "allowed_child": []}, "Stimulus Group": {"name": "Stimulus Group", "signature": "stimulus_group", "group": ["Stimuli"], "toplevel": true, "allowed_child": ["Replicator", "Stimulus", "Stimulus Group"], "description": "An indexable group of stimuli", "basename": "stimulus_group", "isa": ["Stimulus Group"]}, "Transform Stimulus": {"name": "Transform Stimulus", "abstract": true, "isa": ["Stimulus", "Transform Stimulus"], "parameters": [{"name": "x_size", "example": 5.0, "description": "Horizontal size (degrees).\n\nIf omitted, the value of `y_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "y_size", "example": 5.0, "description": "Vertical size (degrees).\n\nIf omitted, the value of `x_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "x_position", "default": 0.0, "description": "Horizontal center position (degrees)"}, {"name": "y_position", "default": 0.0, "description": "Vertical center position (degrees)"}, {"name": "rotation", "default": 0.0, "description": "Rotation (degrees)"}, {"name": "fullscreen", "default": "NO", "description": "If ``YES``, the stimulus is sized to fill the display.  In this mode, `x_size`_, `y_size`_, `x_position`_, `y_position`_, and `rotation`_ are ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}], "basename": "transform_stimulus", "toplevel": true, "group": ["Stimuli"], "allowed_child": []}, "Basic Transform Stimulus": {"name": "Basic Transform Stimulus", "abstract": true, "isa": ["Basic Transform Stimulus", "Stimulus", "Transform Stimulus"], "parameters": [{"name": "alpha_multiplier", "default": 1.0, "description": "Controls the transparency of the stimulus.  ``1.0`` is fully opaque, while ``0.0`` is fully tranparent.\n"}, {"name": "x_size", "example": 5.0, "description": "Horizontal size (degrees).\n\nIf omitted, the value of `y_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "y_size", "example": 5.0, "description": "Vertical size (degrees).\n\nIf omitted, the value of `x_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "x_position", "default": 0.0, "description": "Horizontal center position (degrees)"}, {"name": "y_position", "default": 0.0, "description": "Vertical center position (degrees)"}, {"name": "rotation", "default": 0.0, "description": "Rotation (degrees)"}, {"name": "fullscreen", "default": "NO", "description": "If ``YES``, the stimulus is sized to fill the display.  In this mode, `x_size`_, `y_size`_, `x_position`_, `y_position`_, and `rotation`_ are ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}], "basename": "basic_transform_stimulus", "toplevel": true, "group": ["Stimuli"], "allowed_child": []}, "Image Stimulus": {"name": "Image Stimulus", "signature": "stimulus/image_file", "isa": ["Basic Transform Stimulus", "Stimulus", "Image Stimulus", "Transform Stimulus"], "description": "An image stimulus loaded from any standard-format image file.\n\n*Note*:  To preserve the image's aspect ratio on screen, `x_size`_ and\n`y_size`_ must be equal.  When drawn, the larger dimension spans the full\nspecified size, while the smaller dimension is scaled to maintain the\naspect ratio.\n", "parameters": [{"name": "path", "required": true, "example": ["images/image1.png", "/path/to/image.png"], "description": "Filesystem path to the image file"}, {"name": "alpha_multiplier", "default": 1.0, "description": "Controls the transparency of the stimulus.  ``1.0`` is fully opaque, while ``0.0`` is fully tranparent.\n"}, {"name": "x_size", "example": 5.0, "description": "Horizontal size (degrees).\n\nIf omitted, the value of `y_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "y_size", "example": 5.0, "description": "Vertical size (degrees).\n\nIf omitted, the value of `x_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "x_position", "default": 0.0, "description": "Horizontal center position (degrees)"}, {"name": "y_position", "default": 0.0, "description": "Vertical center position (degrees)"}, {"name": "rotation", "default": 0.0, "description": "Rotation (degrees)"}, {"name": "fullscreen", "default": "NO", "description": "If ``YES``, the stimulus is sized to fill the display.  In this mode, `x_size`_, `y_size`_, `x_position`_, `y_position`_, and `rotation`_ are ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}], "basename": "image_stimulus", "toplevel": true, "group": ["Stimuli"], "allowed_child": []}, "Blank Fullscreen Stimulus": {"name": "Blank Fullscreen Stimulus", "signature": "stimulus/blank_screen", "isa": ["Stimulus", "Blank Fullscreen Stimulus"], "description": "A stimulus that fills the screen with a user-defined color.  This stimulus must be `queued <Queue Stimulus>` like any other.\n", "parameters": [{"name": "color", "default": "0.5,0.5,0.5", "description": "The fill color, expressed as a comma-separated list of red, green, and blue components.  Each component may be described by any valid expression, but the expression must result in a value between 0 and 1 (inclusive).\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}], "basename": "blank_fullscreen_stimulus", "toplevel": true, "group": ["Stimuli"], "allowed_child": []}, "Colored Transform Stimulus": {"name": "Colored Transform Stimulus", "abstract": true, "isa": ["Colored Transform Stimulus", "Basic Transform Stimulus", "Stimulus", "Transform Stimulus"], "parameters": [{"name": "color", "default": "1.0,1.0,1.0", "description": "The color of the stimulus, expressed as a comma-separated list of red, green, and blue components.  Each component may be described by any valid expression, but the expression must result in a value between 0 and 1 (inclusive).\n"}, {"name": "alpha_multiplier", "default": 1.0, "description": "Controls the transparency of the stimulus.  ``1.0`` is fully opaque, while ``0.0`` is fully tranparent.\n"}, {"name": "x_size", "example": 5.0, "description": "Horizontal size (degrees).\n\nIf omitted, the value of `y_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "y_size", "example": 5.0, "description": "Vertical size (degrees).\n\nIf omitted, the value of `x_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "x_position", "default": 0.0, "description": "Horizontal center position (degrees)"}, {"name": "y_position", "default": 0.0, "description": "Vertical center position (degrees)"}, {"name": "rotation", "default": 0.0, "description": "Rotation (degrees)"}, {"name": "fullscreen", "default": "NO", "description": "If ``YES``, the stimulus is sized to fill the display.  In this mode, `x_size`_, `y_size`_, `x_position`_, `y_position`_, and `rotation`_ are ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}], "basename": "colored_transform_stimulus", "toplevel": true, "group": ["Stimuli"], "allowed_child": []}, "Rectangle Stimulus": {"name": "Rectangle Stimulus", "signature": "stimulus/rectangle", "isa": ["Basic Transform Stimulus", "Rectangle Stimulus", "Stimulus", "Transform Stimulus", "Colored Transform Stimulus"], "description": "A rectangle stimulus", "basename": "rectangle_stimulus", "toplevel": true, "group": ["Stimuli"], "allowed_child": [], "parameters": [{"name": "color", "default": "1.0,1.0,1.0", "description": "The color of the stimulus, expressed as a comma-separated list of red, green, and blue components.  Each component may be described by any valid expression, but the expression must result in a value between 0 and 1 (inclusive).\n"}, {"name": "alpha_multiplier", "default": 1.0, "description": "Controls the transparency of the stimulus.  ``1.0`` is fully opaque, while ``0.0`` is fully tranparent.\n"}, {"name": "x_size", "example": 5.0, "description": "Horizontal size (degrees).\n\nIf omitted, the value of `y_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "y_size", "example": 5.0, "description": "Vertical size (degrees).\n\nIf omitted, the value of `x_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "x_position", "default": 0.0, "description": "Horizontal center position (degrees)"}, {"name": "y_position", "default": 0.0, "description": "Vertical center position (degrees)"}, {"name": "rotation", "default": 0.0, "description": "Rotation (degrees)"}, {"name": "fullscreen", "default": "NO", "description": "If ``YES``, the stimulus is sized to fill the display.  In this mode, `x_size`_, `y_size`_, `x_position`_, `y_position`_, and `rotation`_ are ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}]}, "Ellipse Stimulus": {"name": "Ellipse Stimulus", "signature": "stimulus/circle", "alias": ["stimulus/ellipse"], "isa": ["Basic Transform Stimulus", "Ellipse Stimulus", "Stimulus", "Transform Stimulus", "Colored Transform Stimulus"], "description": "An ellipse stimulus", "basename": "ellipse_stimulus", "toplevel": true, "group": ["Stimuli"], "allowed_child": [], "parameters": [{"name": "color", "default": "1.0,1.0,1.0", "description": "The color of the stimulus, expressed as a comma-separated list of red, green, and blue components.  Each component may be described by any valid expression, but the expression must result in a value between 0 and 1 (inclusive).\n"}, {"name": "alpha_multiplier", "default": 1.0, "description": "Controls the transparency of the stimulus.  ``1.0`` is fully opaque, while ``0.0`` is fully tranparent.\n"}, {"name": "x_size", "example": 5.0, "description": "Horizontal size (degrees).\n\nIf omitted, the value of `y_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "y_size", "example": 5.0, "description": "Vertical size (degrees).\n\nIf omitted, the value of `x_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "x_position", "default": 0.0, "description": "Horizontal center position (degrees)"}, {"name": "y_position", "default": 0.0, "description": "Vertical center position (degrees)"}, {"name": "rotation", "default": 0.0, "description": "Rotation (degrees)"}, {"name": "fullscreen", "default": "NO", "description": "If ``YES``, the stimulus is sized to fill the display.  In this mode, `x_size`_, `y_size`_, `x_position`_, `y_position`_, and `rotation`_ are ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}]}, "Fixation Point Stimulus": {"name": "Fixation Point Stimulus", "signature": "stimulus/fixation_point", "isa": ["Basic Transform Stimulus", "Rectangle Stimulus", "Fixation Point Stimulus", "Stimulus", "Transform Stimulus", "Colored Transform Stimulus"], "description": "A rectangular fixation point stimulus.  Also serves as a \"calibratable\" object for calibrator-related actions (e.g. `Take Calibration Sample`, `End Averaged Calibration Sample`).\n", "parameters": [{"name": "trigger_width", "required": true, "description": "Width of the (square) fixation window, which shares its center with the visible stimulus rectangle\n"}, {"name": "trigger_watch_x", "required": true, "description": "Variable containing the horizontal eye position\n"}, {"name": "trigger_watch_y", "required": true, "description": "Variable containing the vertical eye position\n"}, {"name": "trigger_flag", "required": true, "description": "Variable to which fixation status is written. When the subject's gaze (as reported by `trigger_watch_x`_ and `trigger_watch_y`_) enters the fixation window, the variable is set to true.  When the subject's gaze leaves the fixation window, the variable is set to false.\n"}, {"name": "color", "default": "1.0,1.0,1.0", "description": "The color of the stimulus, expressed as a comma-separated list of red, green, and blue components.  Each component may be described by any valid expression, but the expression must result in a value between 0 and 1 (inclusive).\n"}, {"name": "alpha_multiplier", "default": 1.0, "description": "Controls the transparency of the stimulus.  ``1.0`` is fully opaque, while ``0.0`` is fully tranparent.\n"}, {"name": "x_size", "example": 5.0, "description": "Horizontal size (degrees).\n\nIf omitted, the value of `y_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "y_size", "example": 5.0, "description": "Vertical size (degrees).\n\nIf omitted, the value of `x_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "x_position", "default": 0.0, "description": "Horizontal center position (degrees)"}, {"name": "y_position", "default": 0.0, "description": "Vertical center position (degrees)"}, {"name": "rotation", "default": 0.0, "description": "Rotation (degrees)"}, {"name": "fullscreen", "default": "NO", "description": "If ``YES``, the stimulus is sized to fill the display.  In this mode, `x_size`_, `y_size`_, `x_position`_, `y_position`_, and `rotation`_ are ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}], "basename": "fixation_point_stimulus", "toplevel": true, "group": ["Stimuli"], "allowed_child": []}, "Circular Fixation Point Stimulus": {"name": "Circular Fixation Point Stimulus", "signature": "stimulus/circular_fixation_point", "isa": ["Basic Transform Stimulus", "Ellipse Stimulus", "Stimulus", "Transform Stimulus", "Circular Fixation Point Stimulus", "Colored Transform Stimulus"], "description": "An elliptical fixation point stimulus", "parameters": [{"name": "trigger_width", "required": true, "description": "Width of the (circular) fixation window, which shares its center with the visible stimulus ellipse\n"}, {"name": "trigger_watch_x", "required": true, "description": "Variable containing the horizontal eye position\n"}, {"name": "trigger_watch_y", "required": true, "description": "Variable containing the vertical eye position\n"}, {"name": "trigger_flag", "required": true, "description": "Variable to which fixation status is written. When the subject's gaze (as reported by `trigger_watch_x`_ and `trigger_watch_y`_) enters the fixation window, the variable is set to true.  When the subject's gaze leaves the fixation window, the variable is set to false.\n"}, {"name": "color", "default": "1.0,1.0,1.0", "description": "The color of the stimulus, expressed as a comma-separated list of red, green, and blue components.  Each component may be described by any valid expression, but the expression must result in a value between 0 and 1 (inclusive).\n"}, {"name": "alpha_multiplier", "default": 1.0, "description": "Controls the transparency of the stimulus.  ``1.0`` is fully opaque, while ``0.0`` is fully tranparent.\n"}, {"name": "x_size", "example": 5.0, "description": "Horizontal size (degrees).\n\nIf omitted, the value of `y_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "y_size", "example": 5.0, "description": "Vertical size (degrees).\n\nIf omitted, the value of `x_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "x_position", "default": 0.0, "description": "Horizontal center position (degrees)"}, {"name": "y_position", "default": 0.0, "description": "Vertical center position (degrees)"}, {"name": "rotation", "default": 0.0, "description": "Rotation (degrees)"}, {"name": "fullscreen", "default": "NO", "description": "If ``YES``, the stimulus is sized to fill the display.  In this mode, `x_size`_, `y_size`_, `x_position`_, `y_position`_, and `rotation`_ are ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}], "basename": "circular_fixation_point_stimulus", "toplevel": true, "group": ["Stimuli"], "allowed_child": []}, "Sound Stimulus": {"name": "Sound Stimulus", "signature": "sound/wav_file", "group": ["Sounds"], "toplevel": true, "description": "A simple `WAV <https://en.wikipedia.org/wiki/WAV>`_ file based sound stimulus\n", "parameters": [{"name": "path", "required": true, "example": ["sounds/sound1.wav", "/path/to/sound.wav"], "description": "Filesystem path to the sound file"}, {"name": "amplitude", "default": 1.0, "description": "Controls the volume at which the sound plays.  ``1.0`` is full volume, while ``0.0`` is silent.\n"}], "basename": "sound_stimulus", "isa": ["Sound Stimulus"], "allowed_child": []}, "Experiment": {"name": "Experiment", "signature": "experiment", "group": ["Paradigm Components"], "toplevel": true, "allowed_child": ["Replicator", "Protocol"], "description": "Top-level container for all `protocols <Protocol>` in an experiment\n", "basename": "experiment", "isa": ["Experiment"]}, "Container State": {"name": "Container State", "abstract": true, "group": ["Paradigm Components"], "parameters": [{"name": "interruptible", "default": "YES", "description": "If ``NO``, then any request to pause or stop the experiment while this component is executing will be deferred until said execution completes. This behavior is inherited by the component's children, making them non-interruptible as well.\n"}], "basename": "container_state", "isa": ["Container State"], "allowed_child": []}, "List State": {"name": "List State", "abstract": true, "isa": ["Container State", "List State", "Selectable"], "allowed_child": ["List", "Task System", "Action", "Block", "Replicator", "Trial"], "basename": "list_state", "group": ["Paradigm Components"], "parameters": [{"name": "interruptible", "default": "YES", "description": "If ``NO``, then any request to pause or stop the experiment while this component is executing will be deferred until said execution completes. This behavior is inherited by the component's children, making them non-interruptible as well.\n"}, {"name": "selection", "options": ["sequential", "sequential_ascending", "sequential_descending", "random_without_replacement", "random_with_replacement"], "default": "sequential", "description": "Order in which to draw selections"}, {"name": "nsamples", "default": 1, "description": "Number of samples to allow before `Reset Selections` is required\n"}, {"name": "sampling_method", "options": ["cycles", "samples"], "default": "cycles", "description": "Controls the interpretation of `nsamples`_.  If set to ``cycles``, *all* possible selections must be made to complete one sample.  If set to ``samples``, each individual selection counts as a sample.\n"}]}, "Protocol": {"name": "Protocol", "signature": "protocol", "isa": ["Protocol", "Container State", "List State", "Selectable"], "description": "A top-level paradigm component that contains other sub-components.\n\nProtocols are the largest unit of logical organization in an experiment.  To\n\"run\" an experiment really means to run one or more of its protocols.\n\nThe execution order and number of repetitions of a protocol's sub-components\nare determined by `selection`_, `nsamples`_, and `sampling_method`_.\n", "basename": "protocol", "group": ["Paradigm Components"], "allowed_child": ["List", "Task System", "Action", "Block", "Replicator", "Trial"], "parameters": [{"name": "interruptible", "default": "YES", "description": "If ``NO``, then any request to pause or stop the experiment while this component is executing will be deferred until said execution completes. This behavior is inherited by the component's children, making them non-interruptible as well.\n"}, {"name": "selection", "options": ["sequential", "sequential_ascending", "sequential_descending", "random_without_replacement", "random_with_replacement"], "default": "sequential", "description": "Order in which to draw selections"}, {"name": "nsamples", "default": 1, "description": "Number of samples to allow before `Reset Selections` is required\n"}, {"name": "sampling_method", "options": ["cycles", "samples"], "default": "cycles", "description": "Controls the interpretation of `nsamples`_.  If set to ``cycles``, *all* possible selections must be made to complete one sample.  If set to ``samples``, each individual selection counts as a sample.\n"}]}, "Block": {"name": "Block", "signature": "block", "isa": ["Selectable", "Container State", "List State", "Block"], "description": "A container paradigm component.\n\nThe execution order and number of repetitions of a block's sub-components\nare determined by `selection`_, `nsamples`_, and `sampling_method`_.\n", "basename": "block", "group": ["Paradigm Components"], "allowed_child": ["List", "Task System", "Action", "Block", "Replicator", "Trial"], "parameters": [{"name": "interruptible", "default": "YES", "description": "If ``NO``, then any request to pause or stop the experiment while this component is executing will be deferred until said execution completes. This behavior is inherited by the component's children, making them non-interruptible as well.\n"}, {"name": "selection", "options": ["sequential", "sequential_ascending", "sequential_descending", "random_without_replacement", "random_with_replacement"], "default": "sequential", "description": "Order in which to draw selections"}, {"name": "nsamples", "default": 1, "description": "Number of samples to allow before `Reset Selections` is required\n"}, {"name": "sampling_method", "options": ["cycles", "samples"], "default": "cycles", "description": "Controls the interpretation of `nsamples`_.  If set to ``cycles``, *all* possible selections must be made to complete one sample.  If set to ``samples``, each individual selection counts as a sample.\n"}]}, "Trial": {"name": "Trial", "signature": "trial", "isa": ["List State", "Trial", "Container State", "Selectable"], "description": "A container paradigm component.\n\nThe execution order and number of repetitions of a trial's sub-components\nare determined by `selection`_, `nsamples`_, and `sampling_method`_.\n", "basename": "trial", "group": ["Paradigm Components"], "allowed_child": ["List", "Task System", "Action", "Block", "Replicator", "Trial"], "parameters": [{"name": "interruptible", "default": "YES", "description": "If ``NO``, then any request to pause or stop the experiment while this component is executing will be deferred until said execution completes. This behavior is inherited by the component's children, making them non-interruptible as well.\n"}, {"name": "selection", "options": ["sequential", "sequential_ascending", "sequential_descending", "random_without_replacement", "random_with_replacement"], "default": "sequential", "description": "Order in which to draw selections"}, {"name": "nsamples", "default": 1, "description": "Number of samples to allow before `Reset Selections` is required\n"}, {"name": "sampling_method", "options": ["cycles", "samples"], "default": "cycles", "description": "Controls the interpretation of `nsamples`_.  If set to ``cycles``, *all* possible selections must be made to complete one sample.  If set to ``samples``, each individual selection counts as a sample.\n"}]}, "List": {"name": "List", "signature": "list", "isa": ["Container State", "List", "List State", "Selectable"], "description": "A container paradigm component.\n\nThe execution order and number of repetitions of a list's sub-components are\ndetermined by `selection`_, `nsamples`_, and `sampling_method`_.\n", "basename": "list", "group": ["Paradigm Components"], "allowed_child": ["List", "Task System", "Action", "Block", "Replicator", "Trial"], "parameters": [{"name": "interruptible", "default": "YES", "description": "If ``NO``, then any request to pause or stop the experiment while this component is executing will be deferred until said execution completes. This behavior is inherited by the component's children, making them non-interruptible as well.\n"}, {"name": "selection", "options": ["sequential", "sequential_ascending", "sequential_descending", "random_without_replacement", "random_with_replacement"], "default": "sequential", "description": "Order in which to draw selections"}, {"name": "nsamples", "default": 1, "description": "Number of samples to allow before `Reset Selections` is required\n"}, {"name": "sampling_method", "options": ["cycles", "samples"], "default": "cycles", "description": "Controls the interpretation of `nsamples`_.  If set to ``cycles``, *all* possible selections must be made to complete one sample.  If set to ``samples``, each individual selection counts as a sample.\n"}]}, "Task System": {"name": "Task System", "signature": "task_system", "mwel_alias": ["task"], "isa": ["Task System", "Container State"], "allowed_child": ["Task System State"], "description": "A paradigm component defining a `finite state machine <https://en.wikipedia.org/wiki/Finite-state_machine>`_.  It contains `Task System State` objects, which execute `Actions` and select `Transitions` from one state to the next. The task system finishes when one of its states evaluates an `Exit Task System` transition.\n", "basename": "task_system", "group": ["Paradigm Components"], "parameters": [{"name": "interruptible", "default": "YES", "description": "If ``NO``, then any request to pause or stop the experiment while this component is executing will be deferred until said execution completes. This behavior is inherited by the component's children, making them non-interruptible as well.\n"}]}, "Task System State": {"name": "Task System State", "signature": "task_system_state", "mwel_alias": ["state"], "isa": ["Task System State", "Container State"], "allowed_child": ["Action", "Transition"], "description": "A paradigm component defining a state within a `finite state machine <https://en.wikipedia.org/wiki/Finite-state_machine>`_. It is contained within a `Task System` and specifies a list of `Actions`, which are executed when the state first gains control, and a list of `Transitions`, which are evaluated repeatedly until one of them succeeds and selects the next state.\n", "basename": "task_system_state", "group": ["Paradigm Components"], "parameters": [{"name": "interruptible", "default": "YES", "description": "If ``NO``, then any request to pause or stop the experiment while this component is executing will be deferred until said execution completes. This behavior is inherited by the component's children, making them non-interruptible as well.\n"}]}, "Replicator": {"name": "Replicator", "abstract": true, "group": ["Replicators"], "transient": true, "toplevel": true, "allowed_child": ["Replicator", "Stimulus", "List State", "Stimulus Group"], "basename": "replicator", "isa": ["Replicator"]}, "Range Replicator": {"name": "Range Replicator", "signature": "range_replicator", "isa": ["Range Replicator", "Replicator"], "description": "A construct that replicates its contents (textually) at parse time.  Each replication assigns a different, sequential value to the specified `variable`_ (similar to a `for loop <https://en.wikipedia.org/wiki/For_loop>`_). This can be used, for example, to generate a separate `Trial` for each element in a `Stimulus Group` by using the replicator variable as the index in to the group.\n", "parameters": [{"name": "variable", "required": true, "description": "Replicator variable.  The variable must have local scope.\n"}, {"name": "from", "required": true, "description": "First value assigned to `variable`_\n"}, {"name": "to", "required": true, "description": "Replication stops when `variable`_ is greater than this value\n"}, {"name": "step", "required": true, "description": "Amount by which to increment the value of `variable`_ after each replication.  Must be greater than zero.\n"}], "basename": "range_replicator", "transient": true, "toplevel": true, "group": ["Replicators"], "allowed_child": ["Replicator", "Stimulus", "List State", "Stimulus Group"]}, "List Replicator": {"name": "List Replicator", "signature": "list_replicator", "isa": ["Replicator", "List Replicator"], "description": "A construct that replicates its contents (textually) at parse time.  Each\nreplication assigns a different value from a user-provided list to the\nspecified `variable`_ (similar to a `foreach loop\n<https://en.wikipedia.org/wiki/Foreach_loop>`_). This can be used, for\nexample, to generate a `Stimulus Group` of `images <Image Stimulus>` by\nusing the replicator variable as the path to each image file.\n\n.. rubric:: Filenames Directive\n\nThe value list can include one or more items of the form\n``filenames(glob_pat)``, where ``glob_pat`` is a `glob pattern\n<https://en.wikipedia.org/wiki/Glob_(programming)>`_, similar to those used\nin Unix shell commands.  The glob pattern must match the names of one or\nmore files.  Both absolute and relative paths are acceptable.  If the\npattern matches no files, the parser raises an error.\n\nWhen the replicator is evaluated, each ``filenames`` directive is expanded\ninto a comma-separated list of matching file names.  For example, if you\nhave five image files named ``img1.png`` to ``img5.png``, then the following\nvalue lists are all equivalent:\n\n* ``img1.png, img2.png, img3.png, img4.png, img5.png``\n* ``filenames(*.png)``\n* ``filenames(img?.png)``\n* ``filenames(img[12].png), img3.png, filenames(img[!1-3].png)``\n", "parameters": [{"name": "variable", "required": true, "description": "Replicator variable.  The variable must have local scope.\n"}, {"name": "values", "required": true, "description": "Comma-separated list of values to assign to `variable`_, one per replication\n"}], "basename": "list_replicator", "transient": true, "toplevel": true, "group": ["Replicators"], "allowed_child": ["Replicator", "Stimulus", "List State", "Stimulus Group"]}, "Action": {"name": "Action", "abstract": true, "group": ["Actions"], "basename": "action", "isa": ["Action"], "allowed_child": []}, "Report / Message": {"name": "Report / Message", "signature": "action/report", "isa": ["Action", "Report / Message"], "description": "Write a message to the console and event stream", "parameters": [{"name": "message", "required": true, "description": "Message text.  You can include variable values in the message by placing a ``$`` before each variable's name (e.g. ``x = $x, y = $y``).\n"}], "basename": "report_message", "group": ["Actions"], "allowed_child": []}, "Assign Variable": {"name": "Assign Variable", "signature": "action/assignment", "isa": ["Assign Variable", "Action"], "description": "Assign a value to a variable.\n\nIf the target variable's current value is a list or dictionary, you can\nassign a new value to one of its elements by including one or more\nsquare-bracket-enclosed indices in `variable`_.\n\nIn MWEL, `assignments <assignments>` are automatically converted into Assign\nVariable actions (except for top-level assignments, which are converted into\n`Variable Assignment` instances).\n", "parameters": [{"name": "variable", "required": true, "example": ["my_var", "my_var[2]", "my_var[x][y]['b']"], "description": "Variable name.  May include one or more index expressions."}, {"name": "value", "required": true, "description": "Value to assign"}], "basename": "assign_variable", "group": ["Actions"], "allowed_child": []}, "Pulse Variable": {"name": "Pulse Variable", "signature": "action/pulse", "isa": ["Action", "Pulse Variable"], "description": "Sets a variable high (i.e. sets its value to 1).  Then, after the specified duration, sets it low (i.e. to 0).  The end of the pulse is triggered asynchronously, so this action does *not* pause the experiment.\n", "parameters": [{"name": "variable", "required": true, "description": "Variable to pulse"}, {"name": "duration", "required": true, "description": "Duration of the pulse (microseconds)"}], "basename": "pulse_variable", "group": ["Actions"], "allowed_child": []}, "Assert": {"name": "Assert", "signature": "action/assert", "isa": ["Assert", "Action"], "description": "Tests a boolean condition.  If the condition evaluates to false, reports an error with the specified message.\n", "parameters": [{"name": "condition", "required": true, "description": "Condition expression"}, {"name": "message", "description": "Error message to report if the assertion fails.  You can include variable\nvalues in the message by placing a ``$`` before each variable's name\n(e.g. ``x = $x, y = $y``).\n\nIf omitted, a default message containing the condition expression is\nused.\n"}, {"name": "stop_on_failure", "default": "NO", "description": "If ``YES``, the experiment will automatically stop if the assertion fails\n"}], "basename": "assert", "group": ["Actions"], "allowed_child": []}, "Schedule Actions": {"name": "Schedule Actions", "signature": "action/schedule", "isa": ["Schedule Actions", "Action"], "allowed_child": ["Action"], "description": "Schedule the execution of a list of contained actions.  These actions can be\nscheduled to occur after a user-defined delay and can be repeated multiple\ntimes with a user-defined inter-execution interval.\n\nThe actions will execute in a separate `thread\n<https://en.wikipedia.org/wiki/Thread_(computing)>`_, independent of (and in\nparallel with) the main state system.\n", "parameters": [{"name": "delay", "required": true, "description": "Initial delay before first execution (microseconds)"}, {"name": "duration", "required": true, "description": "Delay before each execution after the first (microseconds)"}, {"name": "repeats", "required": true, "description": "Number of times to repeat execution.  The special value ``-999`` causes execution to repeat indefinitely (until the experiment stops or `cancel`_ is set to true).\n"}, {"name": "cancel", "description": "If set to the name of a variable, assigning a true value (e.g. ``true``, ``YES``, ``1``) to that variable will cancel all future executions of the contained actions\n"}], "basename": "schedule_actions", "group": ["Actions"]}, "Conditionally Execute Actions (if)": {"name": "Conditionally Execute Actions (if)", "signature": "action/if", "alias": ["action/when"], "isa": ["Conditionally Execute Actions (if)", "Action"], "allowed_child": ["Action"], "description": "Execute a list of actions if a condition is true", "parameters": [{"name": "condition", "required": true, "description": "Condition expression"}], "basename": "conditionally_execute_actions_if", "group": ["Actions"]}, "Unconditionally Execute Actions (else)": {"name": "Unconditionally Execute Actions (else)", "signature": "action/else", "alias": ["action/otherwise"], "isa": ["Unconditionally Execute Actions (else)", "Action"], "allowed_child": ["Action"], "description": "Execute a list of actions unconditionally.  Useful only in conjunction with `Conditional Branching (if/else)`.\n", "basename": "unconditionally_execute_actions_else", "group": ["Actions"]}, "Conditional Branching (if/else)": {"name": "Conditional Branching (if/else)", "signature": "action/if_else", "alias": ["action/choose"], "isa": ["Action", "Conditional Branching (if/else)"], "allowed_child": ["Conditionally Execute Actions (if)", "Unconditionally Execute Actions (else)"], "description": "Given a list of `Conditionally Execute Actions (if)` actions, executes the first one whose condition is true, or none if all conditions are false.  The list may include a single `Unconditionally Execute Actions (else)` action, which will be executed only if all the conditions are false.\n", "basename": "conditional_branching_if_else", "group": ["Actions"]}, "Repeat Actions (while)": {"name": "Repeat Actions (while)", "signature": "action/while", "isa": ["Repeat Actions (while)", "Action"], "allowed_child": ["Action"], "description": "Execute a list of actions repeatedly while a condition is true", "parameters": [{"name": "condition", "required": true, "description": "Condition expression"}], "basename": "repeat_actions_while", "group": ["Actions"]}, "Timer Action": {"name": "Timer Action", "abstract": true, "isa": ["Timer Action", "Action"], "parameters": [{"name": "duration", "required": true, "example": 1.0, "description": "Duration"}, {"name": "duration_units", "options": ["us", "ms", "s"], "default": "us", "description": "Duration units"}, {"name": "timebase", "description": "If set to the name of a `timebase <Set Timebase>`, the expiration time will be measured relative to that timebase.  If omitted, the current time will be used as the timebase.\n"}], "basename": "timer_action", "group": ["Actions"], "allowed_child": []}, "Wait": {"name": "Wait", "signature": "action/wait", "isa": ["Timer Action", "Action", "Wait"], "description": "Pause for a specified amount of time", "basename": "wait", "group": ["Actions"], "allowed_child": [], "parameters": [{"name": "duration", "required": true, "example": 1.0, "description": "Duration"}, {"name": "duration_units", "options": ["us", "ms", "s"], "default": "us", "description": "Duration units"}, {"name": "timebase", "description": "If set to the name of a `timebase <Set Timebase>`, the expiration time will be measured relative to that timebase.  If omitted, the current time will be used as the timebase.\n"}]}, "Wait for Condition": {"name": "Wait for Condition", "signature": "action/wait_for_condition", "isa": ["Wait for Condition", "Action"], "description": "Wait until a condition becomes true or a timeout occurs.  If the wait times out before the condition becomes true, issue an error message and (optionally) stop the experiment.\n", "parameters": [{"name": "condition", "required": true, "description": "Condition expression"}, {"name": "timeout", "required": true, "description": "Timeout duration (microseconds)"}, {"name": "timeout_message", "description": "Error message to report if the wait times out.  If omitted, a default message is used.\n"}, {"name": "stop_on_timeout", "default": "YES", "description": "If true, stop the experiment if the wait times out"}], "basename": "wait_for_condition", "group": ["Actions"], "allowed_child": []}, "Start Timer": {"name": "Start Timer", "signature": "action/start_timer", "isa": ["Timer Action", "Action", "Start Timer"], "description": "Starts a named timer that can be used to control the flow through a `Task System`.  The `Timer Expired Transition` and the ``timerExpired`` function can be used to evaluate whether the timer has expired.\n", "parameters": [{"name": "timer", "required": true, "example": "MyTimer", "description": "Name for the timer"}, {"name": "duration", "required": true, "example": 1.0, "description": "Duration"}, {"name": "duration_units", "options": ["us", "ms", "s"], "default": "us", "description": "Duration units"}, {"name": "timebase", "description": "If set to the name of a `timebase <Set Timebase>`, the expiration time will be measured relative to that timebase.  If omitted, the current time will be used as the timebase.\n"}], "basename": "start_timer", "group": ["Actions"], "allowed_child": []}, "Set Timebase": {"name": "Set Timebase", "signature": "action/set_timebase", "isa": ["Action", "Set Timebase"], "description": "Sets a named reference time against which `timers <Start Timer>` can be defined\n", "parameters": [{"name": "timebase", "required": true, "example": "MyTimebase", "description": "Name for the timebase"}], "basename": "set_timebase", "group": ["Actions"], "allowed_child": []}, "Load Stimulus": {"name": "Load Stimulus", "signature": "action/load_stimulus", "isa": ["Action", "Load Stimulus"], "description": "Explicitly load a stimulus object (e.g. load a file from disk, compute a dynamically generated stimulus, etc.).  This is useful when the ``deferred`` parameter on the stimulus is set to ``yes`` or ``explicit``.\n", "parameters": [{"name": "stimulus", "required": true, "description": "Stimulus to load"}], "basename": "load_stimulus", "group": ["Actions"], "allowed_child": []}, "Unload Stimulus": {"name": "Unload Stimulus", "signature": "action/unload_stimulus", "isa": ["Unload Stimulus", "Action"], "description": "Explicitly unload a stimulus object, thereby releasing any memory or other resources used by the stimulus.  This is useful when the ``deferred`` parameter on the stimulus is set to ``yes`` or ``explicit``.\n", "parameters": [{"name": "stimulus", "required": true, "description": "Stimulus to unload"}], "basename": "unload_stimulus", "group": ["Actions"], "allowed_child": []}, "Queue Stimulus": {"name": "Queue Stimulus", "signature": "action/queue_stimulus", "alias": ["action/show_stimulus"], "isa": ["Queue Stimulus", "Action"], "description": "Place a stimulus into the display queue, ready to be displayed when the next `Update Stimulus Display` action is issued\n", "parameters": [{"name": "stimulus", "required": true, "description": "Stimulus to queue"}], "basename": "queue_stimulus", "group": ["Actions"], "allowed_child": []}, "Live Queue Stimulus": {"name": "Live Queue Stimulus", "signature": "action/live_queue_stimulus", "isa": ["Action", "Live Queue Stimulus"], "description": "Place a stimulus into the display queue, ready to be displayed when the next `Update Stimulus Display` action is issued.  Differs from `Queue Stimulus` in that values for variables controlling the appearance of the stimulus will remain malleable right up until the moment that the display is updated.\n", "parameters": [{"name": "stimulus", "required": true, "description": "Stimulus to queue"}], "basename": "live_queue_stimulus", "group": ["Actions"], "allowed_child": []}, "Dequeue Stimulus": {"name": "Dequeue Stimulus", "signature": "action/dequeue_stimulus", "alias": ["action/hide_stimulus"], "isa": ["Dequeue Stimulus", "Action"], "description": "Remove a stimulus from the display queue, so that it will no longer be displayed after the next `Update Stimulus Display` action is issued\n", "parameters": [{"name": "stimulus", "required": true, "description": "Stimulus to dequeue"}], "basename": "dequeue_stimulus", "group": ["Actions"], "allowed_child": []}, "Bring Stimulus to Front": {"name": "Bring Stimulus to Front", "signature": "action/bring_stimulus_to_front", "isa": ["Bring Stimulus to Front", "Action"], "description": "Move a stimulus to the top of the display queue", "parameters": [{"name": "stimulus", "required": true, "description": "Stimulus to move"}], "basename": "bring_stimulus_to_front", "group": ["Actions"], "allowed_child": []}, "Send Stimulus to Back": {"name": "Send Stimulus to Back", "signature": "action/send_stimulus_to_back", "isa": ["Action", "Send Stimulus to Back"], "description": "Move a stimulus to the bottom of the display queue", "parameters": [{"name": "stimulus", "required": true, "description": "Stimulus to move"}], "basename": "send_stimulus_to_back", "group": ["Actions"], "allowed_child": []}, "Update Stimulus Display": {"name": "Update Stimulus Display", "signature": "action/update_stimulus_display", "alias": ["action/update_display"], "isa": ["Action", "Update Stimulus Display"], "description": "Commit pending changes to the display queue, and trigger a redraw of the\nstimulus display.  On the next display refresh, any stimuli that have been\n`queued <Queue Stimulus>` will be drawn, and any stimuli that have been\n`dequeued <Dequeue Stimulus>` will *not* be drawn (and thus will be erased\nif they were previously visible).\n\n*Note*: Before completing, this action waits for all stimulus drawing\ncommands to be submitted to the graphics hardware.  However, it does *not*\nwait for the actual display update to occur.  If your experiment must\ncoordinate other actions with the actual display update, it will need\nto wait until the time provided by `predicted_output_time`_.\n", "parameters": [{"name": "predicted_output_time", "description": "Name of a variable in which to store the predicted output time of the frame in which the update will take effect.  This time is the operating system's best guess for when the rendered frame will start to appear on screen.\n"}], "basename": "update_stimulus_display", "group": ["Actions"], "allowed_child": []}, "Clear Stimulus Display": {"name": "Clear Stimulus Display", "signature": "action/clear_stimulus_display", "alias": ["action/clear_display"], "isa": ["Action", "Clear Stimulus Display"], "description": "Remove all stimuli from the display queue, and trigger a redraw of the stimulus display.  On the next display refresh, only the default background will be drawn.\n", "basename": "clear_stimulus_display", "group": ["Actions"], "allowed_child": []}, "Play Sound": {"name": "Play Sound", "signature": "action/play_sound", "isa": ["Action", "Play Sound"], "description": "Play a `Sound Stimulus`", "parameters": [{"name": "sound", "required": true, "description": "Name of the sound to play"}], "basename": "play_sound", "group": ["Actions"], "allowed_child": []}, "Pause Sound": {"name": "Pause Sound", "signature": "action/pause_sound", "isa": ["Pause Sound", "Action"], "description": "Pause a `Sound Stimulus`", "parameters": [{"name": "sound", "required": true, "description": "Name of the sound to pause"}], "basename": "pause_sound", "group": ["Actions"], "allowed_child": []}, "Stop Sound": {"name": "Stop Sound", "signature": "action/stop_sound", "isa": ["Stop Sound", "Action"], "description": "Stop playing a `Sound Stimulus`", "parameters": [{"name": "sound", "required": true, "description": "Name of the sound to stop"}], "basename": "stop_sound", "group": ["Actions"], "allowed_child": []}, "Accept Selections": {"name": "Accept Selections", "signature": "action/accept_selections", "isa": ["Accept Selections", "Action"], "description": "Permanently accept the selections that have been made so far on a selectable object.  Once accepted, these selections cannot be undone with a `Reject Selections` action.\n", "parameters": [{"name": "selection", "required": true, "description": "Name of the selectable object"}], "basename": "accept_selections", "group": ["Actions"], "allowed_child": []}, "Reject Selections": {"name": "Reject Selections", "signature": "action/reject_selections", "isa": ["Action", "Reject Selections"], "description": "Reject all non-accepted selections on a selectable object (i.e. those made since the last `Accept Selections` action).  From the point of view of the selectable object, it will be as if these selections were never made.\n", "parameters": [{"name": "selection", "required": true, "description": "Name of the selectable object"}], "basename": "reject_selections", "group": ["Actions"], "allowed_child": []}, "Reset Selections": {"name": "Reset Selections", "signature": "action/reset_selection", "isa": ["Action", "Reset Selections"], "description": "Reset all selections on a selectable object, including any that were previously accepted.  From the point of view of the selectable object, it will be as if no selections were never made.\n", "parameters": [{"name": "selection", "required": true, "description": "Name of the selectable object"}], "basename": "reset_selections", "group": ["Actions"], "allowed_child": []}, "Next Selection": {"name": "Next Selection", "signature": "action/next_selection", "isa": ["Action", "Next Selection"], "description": "Advance to the next selection on a `Selection Variable`.  This action does not work on other selectable objects (such as `Block` or `Trial`).\n", "parameters": [{"name": "selection", "required": true, "description": "Name of the selection variable"}], "basename": "next_selection", "group": ["Actions"], "allowed_child": []}, "Pause Experiment": {"name": "Pause Experiment", "signature": "action/pause_experiment", "isa": ["Action", "Pause Experiment"], "description": "Pause the experiment\n", "basename": "pause_experiment", "group": ["Actions"], "allowed_child": []}, "Resume Experiment": {"name": "Resume Experiment", "signature": "action/resume_experiment", "isa": ["Action", "Resume Experiment"], "description": "Resume a paused experiment\n", "basename": "resume_experiment", "group": ["Actions"], "allowed_child": []}, "Stop Experiment": {"name": "Stop Experiment", "signature": "action/stop_experiment", "isa": ["Action", "Stop Experiment"], "description": "Stop the experiment.  Gives an experiment the ability to terminate itself (e.g. in response to a fatal error).\n", "basename": "stop_experiment", "group": ["Actions"], "allowed_child": []}, "Start IO Device": {"name": "Start IO Device", "signature": "action/start_device_io", "alias": ["action/start_io_device"], "isa": ["Start IO Device", "Action"], "description": "Enable an `I/O device <Input/Output>`.  Most I/O devices will not perform input/output tasks until explicitly started.\n", "parameters": [{"name": "device", "required": true, "description": "Name of the I/O device to enable"}], "basename": "start_io_device", "group": ["Actions"], "allowed_child": []}, "Stop IO Device": {"name": "Stop IO Device", "signature": "action/stop_device_io", "alias": ["action/stop_io_device"], "isa": ["Action", "Stop IO Device"], "description": "Disable an `I/O device <Input/Output>`.  Most I/O devices will stop performing input/output tasks when stopped.\n", "parameters": [{"name": "device", "required": true, "description": "Name of the I/O device to disable"}], "basename": "stop_io_device", "group": ["Actions"], "allowed_child": []}, "Take Calibration Sample": {"name": "Take Calibration Sample", "signature": "action/take_calibration_sample", "isa": ["Action", "Take Calibration Sample"], "description": "Instruct a calibrator object to take a new calibration sample.  The calibrator object takes both measured values and the corresponding \"true\" values (provided by a \"calibratable\" object) and uses them to determine a mapping function.\n", "parameters": [{"name": "calibrator", "required": true, "description": "Name of the calibrator"}, {"name": "calibratable_object", "required": true, "description": "Name of the calibratable object"}], "basename": "take_calibration_sample", "group": ["Actions"], "allowed_child": []}, "Update Calibration": {"name": "Update Calibration", "signature": "action/update_calibration", "isa": ["Action", "Update Calibration"], "description": "Prompt a calibrator object to compute a new calibration mapping function based on samples taken using the `Take Calibration Sample` action\n", "parameters": [{"name": "calibrator", "required": true, "description": "Name of the calibrator"}], "basename": "update_calibration", "group": ["Actions"], "allowed_child": []}, "Clear Calibration": {"name": "Clear Calibration", "signature": "action/clear_calibration", "isa": ["Action", "Clear Calibration"], "description": "Prompt a calibrator object to \"forget\" all previously collected calibration samples.  A sufficient number of new samples must be obtained before a new calibration can be computed.\n", "parameters": [{"name": "calibrator", "required": true, "description": "Name of the calibrator"}], "basename": "clear_calibration", "group": ["Actions"], "allowed_child": []}, "Begin Averaged Calibration Sample": {"name": "Begin Averaged Calibration Sample", "signature": "action/begin_calibration_average", "isa": ["Begin Averaged Calibration Sample", "Action"], "description": "Instruct a calibrator object to start computing an average of its input\nvalue(s).\n\nThe purpose of this action is to allow the user to calibrate against a time\naverage over each of the input values, rather than against just the values\nat a particular instant in time.  This action prompts the specified\ncalibrator to start averaging over its inputs.\n\nThe averaging must be stopped with either of the `End Averaged Calibration\nSample` or `End Averaged Calibration and Ignore` actions.  Thus, the total\ntime to average is at the user's discretion and is generally based on either\na sufficient time or the fact that another condition has arisen (e.g.\nfixation broken for eye calibrators).\n", "parameters": [{"name": "calibrator", "required": true, "description": "Name of the calibrator"}], "basename": "begin_averaged_calibration_sample", "group": ["Actions"], "allowed_child": []}, "End Averaged Calibration and Ignore": {"name": "End Averaged Calibration and Ignore", "signature": "action/end_calibration_average_and_ignore", "isa": ["Action", "End Averaged Calibration and Ignore"], "description": "Instruct a calibrator object to stop computing an average of its input value(s) and discard the accumulated data\n", "parameters": [{"name": "calibrator", "required": true, "description": "Name of the calibrator"}], "basename": "end_averaged_calibration_and_ignore", "group": ["Actions"], "allowed_child": []}, "End Averaged Calibration Sample": {"name": "End Averaged Calibration Sample", "signature": "action/end_calibration_average_and_take_sample", "isa": ["Action", "End Averaged Calibration Sample"], "description": "Instruct a calibrator object to stop computing an average of its input value(s) and take a new calibration sample from the accumulated average, with the specified \"calibratable\" object providing the corresponding \"true\" value\n", "parameters": [{"name": "calibrator", "required": true, "description": "Name of the calibrator"}, {"name": "calibratable_object", "required": true, "description": "Name of the calibratable object"}], "basename": "end_averaged_calibration_sample", "group": ["Actions"], "allowed_child": []}, "Play Dynamic Stimulus": {"name": "Play Dynamic Stimulus", "signature": "action/play_dynamic_stimulus", "isa": ["Play Dynamic Stimulus", "Action"], "description": "Start playing a dynamic stimulus", "parameters": [{"name": "stimulus", "required": true, "description": "Name of the dynamic stimulus"}], "basename": "play_dynamic_stimulus", "group": ["Actions"], "allowed_child": []}, "Stop Dynamic Stimulus": {"name": "Stop Dynamic Stimulus", "signature": "action/stop_dynamic_stimulus", "isa": ["Action", "Stop Dynamic Stimulus"], "description": "Stop a dynamic stimulus", "parameters": [{"name": "stimulus", "required": true, "description": "Name of the dynamic stimulus"}], "basename": "stop_dynamic_stimulus", "group": ["Actions"], "allowed_child": []}, "Pause Dynamic Stimulus": {"name": "Pause Dynamic Stimulus", "signature": "action/pause_dynamic_stimulus", "isa": ["Pause Dynamic Stimulus", "Action"], "description": "Pause a playing dynamic stimulus", "parameters": [{"name": "stimulus", "required": true, "description": "Name of the dynamic stimulus"}], "basename": "pause_dynamic_stimulus", "group": ["Actions"], "allowed_child": []}, "Unpause Dynamic Stimulus": {"name": "Unpause Dynamic Stimulus", "signature": "action/unpause_dynamic_stimulus", "isa": ["Action", "Unpause Dynamic Stimulus"], "description": "Unpause (i.e. resume playing) a paused dynamic stimulus", "parameters": [{"name": "stimulus", "required": true, "description": "Name of the dynamic stimulus"}], "basename": "unpause_dynamic_stimulus", "group": ["Actions"], "allowed_child": []}, "Transition": {"name": "Transition", "abstract": true, "group": ["Transitions"], "basename": "transition", "isa": ["Transition"], "allowed_child": []}, "Always Go Transition": {"name": "Always Go Transition", "signature": "transition/direct", "isa": ["Always Go Transition", "Transition"], "description": "A transition that always goes to the specified target state", "parameters": [{"name": "target", "required": true, "description": "Name of the target state"}], "basename": "always_go_transition", "group": ["Transitions"], "allowed_child": []}, "Conditional Transition": {"name": "Conditional Transition", "signature": "transition/conditional", "isa": ["Transition", "Conditional Transition"], "description": "A transition that goes to the target state if a specified condition expression is true\n", "parameters": [{"name": "condition", "required": true, "description": "Condition expression"}, {"name": "target", "required": true, "description": "Name of the target state"}], "basename": "conditional_transition", "group": ["Transitions"], "allowed_child": []}, "Goto Transition": {"name": "Goto Transition", "signature": "transition/goto", "isa": ["Goto Transition", "Transition"], "description": "A transition that goes to the target state either unconditionally or, if `when`_ is provided, only when the specified condition expression is true. Hence, it can fill the role of both the `Always Go Transition` and the `Conditional Transition`.\n", "parameters": [{"name": "target", "required": true, "description": "Name of the target state"}, {"name": "when", "description": "Condition expression.  If omitted, the transition always goes to the target state.\n"}], "basename": "goto_transition", "group": ["Transitions"], "allowed_child": []}, "Timer Expired Transition": {"name": "Timer Expired Transition", "signature": "transition/timer_expired", "isa": ["Timer Expired Transition", "Transition"], "description": "A transition that goes to the target state if a specified timer has expired\n", "parameters": [{"name": "timer", "required": true, "description": "Name of the timer"}, {"name": "target", "required": true, "description": "Name of the target state"}], "basename": "timer_expired_transition", "group": ["Transitions"], "allowed_child": []}, "Exit Task System": {"name": "Exit Task System", "signature": "transition/yield", "isa": ["Exit Task System", "Transition"], "description": "A transition that yields control back to the parent of the current `Task System`\n", "basename": "exit_task_system", "group": ["Transitions"], "allowed_child": []}, "IODevice": {"name": "IODevice", "abstract": true, "group": ["Input/Output"], "toplevel": true, "parameters": [{"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "iodevice", "isa": ["IODevice"], "allowed_child": []}, "IOChannel": {"name": "IOChannel", "abstract": true, "group": ["Input/Output"], "basename": "iochannel", "isa": ["IOChannel"], "allowed_child": []}, "Stimulus Display": {"name": "Stimulus Display", "signature": "iodevice/stimulus_display", "isa": ["Stimulus Display", "IODevice"], "description": "A stimulus display device.  At present, MWorks always creates one (and only one) of these per experiment, regardless of whether the experiment file defines one.  By including a definition in your experiment file, you can change the display's default background color and configure its run-time behavior.\n", "parameters": [{"name": "background_color", "required": true, "example": "0.5,0.5,0.5", "description": "The background color, expressed as a comma-separated list of red, green, and blue components.  Each component may be described by any valid expression, but the expression must result in a value between 0 and 1 (inclusive).\n"}, {"name": "background_alpha_multiplier", "default": 1.0, "description": "Controls the transparency of the background.  ``1.0`` is fully opaque,\nwhile ``0.0`` is fully tranparent.\n\n*Note*: To enable background transparency, you must set `mainScreenInfo\nvar`'s  ``make_window_opaque`` key to ``false``.  To make the stimulus\ndisplay window fully transparent, set this parameter and all components\nof `background_color`_ to 0.\n"}, {"name": "redraw_on_every_refresh", "default": "NO", "description": "If ``YES``, the display will be redrawn during every refresh cycle.  If ``NO``, the display will be redrawn only when needed or when explicitly requested via `Update Stimulus Display`.\n"}, {"name": "announce_stimuli_on_implicit_updates", "default": "YES", "description": "Controls the announcement of stimuli during \"implicit\" display updates (i.e. updates requested by running dynamic stimuli and *not* triggered by an explicit `Update Stimulus Display` action).  If set to ``NO``, then implicit updates will not generate ``#announceStimulus`` events, and ``#stimDisplayUpdate`` events for implicit updates will contain only the number of stimuli displayed (in place of the usual list of stimulus parameters).\n"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "stimulus_display", "toplevel": true, "group": ["Input/Output"], "allowed_child": []}, "Calibrator": {"name": "Calibrator", "abstract": true, "group": ["Filters"], "toplevel": true, "basename": "calibrator", "isa": ["Calibrator"], "allowed_child": []}, "Base Eye Calibrator": {"name": "Base Eye Calibrator", "abstract": true, "isa": ["Base Eye Calibrator", "Calibrator"], "parameters": [{"name": "eyeh_raw", "required": true, "description": "Variable from which to read the raw (input) horizontal eye position\n"}, {"name": "eyev_raw", "required": true, "description": "Variable from which to read the raw (input) vertical eye position\n"}, {"name": "eyeh_calibrated", "required": true, "description": "Variable in which to store the calibrated (output) horizontal eye position\n"}, {"name": "eyev_calibrated", "required": true, "description": "Variable in which to store the calibrated (output) vertical eye position\n"}], "basename": "base_eye_calibrator", "toplevel": true, "group": ["Filters"], "allowed_child": []}, "Eye Calibrator": {"name": "Eye Calibrator", "signature": "calibrator/standard_eye_calibrator", "isa": ["Eye Calibrator", "Base Eye Calibrator", "Calibrator"], "description": "An I/O calibrator specially tailored for eye movement signals.  Uses a second-order (quadratic) fit function.\n", "basename": "eye_calibrator", "toplevel": true, "group": ["Filters"], "allowed_child": [], "parameters": [{"name": "eyeh_raw", "required": true, "description": "Variable from which to read the raw (input) horizontal eye position\n"}, {"name": "eyev_raw", "required": true, "description": "Variable from which to read the raw (input) vertical eye position\n"}, {"name": "eyeh_calibrated", "required": true, "description": "Variable in which to store the calibrated (output) horizontal eye position\n"}, {"name": "eyev_calibrated", "required": true, "description": "Variable in which to store the calibrated (output) vertical eye position\n"}]}, "Linear Eye Calibrator": {"name": "Linear Eye Calibrator", "signature": "calibrator/linear_eye_calibrator", "isa": ["Base Eye Calibrator", "Linear Eye Calibrator", "Calibrator"], "description": "An I/O calibrator specially tailored for eye movement signals.  Uses a first-order (linear) fit function.\n", "basename": "linear_eye_calibrator", "toplevel": true, "group": ["Filters"], "allowed_child": [], "parameters": [{"name": "eyeh_raw", "required": true, "description": "Variable from which to read the raw (input) horizontal eye position\n"}, {"name": "eyev_raw", "required": true, "description": "Variable from which to read the raw (input) vertical eye position\n"}, {"name": "eyeh_calibrated", "required": true, "description": "Variable in which to store the calibrated (output) horizontal eye position\n"}, {"name": "eyev_calibrated", "required": true, "description": "Variable in which to store the calibrated (output) vertical eye position\n"}]}, "Filter": {"name": "Filter", "abstract": true, "group": ["Filters"], "toplevel": true, "basename": "filter", "isa": ["Filter"], "allowed_child": []}, "Box-car Filter": {"name": "Box-car Filter", "signature": "filter/boxcar_filter_1d", "isa": ["Box-car Filter", "Filter"], "description": "A basic 1-D boxcar (moving average) filter", "parameters": [{"name": "in1", "required": true, "description": "Variable from which to read input values"}, {"name": "out1", "required": true, "description": "Variable in which to store output values"}, {"name": "width_samples", "required": true, "description": "Number of samples to store in memory and average over\n"}], "basename": "box_car_filter", "toplevel": true, "group": ["Filters"], "allowed_child": []}, "Eye Monitor": {"name": "Eye Monitor", "signature": "filter/basic_eye_monitor", "isa": ["Eye Monitor", "Filter"], "description": "A filter that takes in an eye signal and outputs basic parameters, such as velocity, saccade state, etc.\n", "parameters": [{"name": "eyeh_calibrated", "required": true, "description": "Variable from which to read horizontal eye position\n"}, {"name": "eyev_calibrated", "required": true, "description": "Variable from which to read vertical eye position\n"}, {"name": "eye_state", "required": true, "description": "Variable in which to store computed eye state (0 for fixation, 1 for saccade)\n"}, {"name": "eye_velocity_h", "description": "Variable in which to store computed horizontal eye velocity (units per second)\n"}, {"name": "eye_velocity_v", "description": "Variable in which to store computed vertical eye velocity (units per second)\n"}, {"name": "width_samples", "required": true, "description": "Number of samples to store in internal `boxcar filters <Box-car Filter>` that are applied to computed velocity components\n"}, {"name": "saccade_entry_speed", "required": true, "description": "A computed eye speed greater than this speed denotes a saccade (units per second)\n"}, {"name": "saccade_exit_speed", "required": true, "description": "A computed eye speed less than or equal to this speed indicates fixation (units per second)\n"}], "basename": "eye_monitor", "toplevel": true, "group": ["Filters"], "allowed_child": []}, "Optimizer": {"name": "Optimizer", "abstract": true, "group": ["Optimizers and Variable Monitors"], "toplevel": true, "basename": "optimizer", "isa": ["Optimizer"], "allowed_child": []}, "Simple Staircase Optimizer": {"name": "Simple Staircase Optimizer", "signature": "staircase", "isa": ["Optimizer", "Simple Staircase Optimizer"], "description": "An object that watches a variable (e.g. a flag reporting success in a behavioral task) and moves another variable up and down according to some criteria\n", "parameters": [{"name": "watch", "required": true, "description": "Variable to watch"}, {"name": "output", "required": true, "description": "Variable to vary"}, {"name": "lower_limit", "required": true, "description": "Lower bound for output"}, {"name": "upper_limit", "required": true, "description": "Upper bound for output"}, {"name": "up_criterion", "required": true, "description": "If watched variable value is greater than or equal to this value, output steps up\n"}, {"name": "down_criterion", "required": true, "description": "If watched variable value is less than or equal to this value, output steps down\n"}, {"name": "step_size", "required": true, "description": "Step size for changing output"}, {"name": "grace_period", "required": true, "description": "Don't step anywhere unless watched variable has been updated at least this many times\n"}, {"name": "history", "required": true, "description": "Number of samples to store in internal `boxcar filter <Box-car Filter>` used to average watched variable values\n"}], "basename": "simple_staircase_optimizer", "toplevel": true, "group": ["Optimizers and Variable Monitors"], "allowed_child": []}, "Bias Monitor": {"name": "Bias Monitor", "signature": "bias_monitor", "isa": ["Optimizer", "Bias Monitor"], "description": "An object that watches parameters of a behavioral task and assesses the probability that the subject is adopting some form of biased strategy\n", "parameters": [{"name": "success", "required": true, "description": "Variable that indicates task success/failure (via a value of 1 or 0, respectively)\n"}, {"name": "response_index", "required": true, "description": "Variable that indicates e.g. physical response location (relevant value is when success changes)\n"}, {"name": "task_correlation", "required": true, "description": "Variable in which to store extent to which responses are consistent with the task\n"}, {"name": "response_bias_correlation", "required": true, "description": "Variable in which to store extent to which responses are consistent with a response bias\n"}, {"name": "alternation_correlation", "required": true, "description": "Variable in which to store extent to which responses are consistent with alternation\n"}, {"name": "history", "required": true, "description": "Number of observations to average over"}, {"name": "grace_period", "required": true, "description": "Don't do anything unless you have at least this many observations\n"}], "basename": "bias_monitor", "toplevel": true, "group": ["Optimizers and Variable Monitors"], "allowed_child": []}, "Resource": {"name": "Resource", "abstract": true, "group": ["Resources"], "toplevel": true, "basename": "resource", "isa": ["Resource"], "allowed_child": []}, "File Resource": {"name": "File Resource", "signature": "resource", "isa": ["File Resource", "Resource"], "description": "A file or set of files required by an experiment\n", "parameters": [{"name": "path", "required": true, "example": ["images/1.png", "sounds", "/shared/imagesets/01/"], "description": "Filesystem path to the required file or directory.  If a directory, all non-hidden, regular files in the directory are copied, including those in nested subdirectories.\n"}], "basename": "file_resource", "toplevel": true, "group": ["Resources"], "allowed_child": []}, "White Noise Background": {"name": "White Noise Background", "signature": "stimulus/white_noise_background", "isa": ["Stimulus", "White Noise Background"], "description": "White noise background stimulus.\n\nFills the display with random noise drawn from a uniform distribution.  The\nexperiment can re-randomize the noise via the `Randomize White Noise\nBackground` action.\n", "parameters": [{"name": "grayscale", "default": "YES", "description": "If ``YES``, all three color channels (red, green, and blue) of a given noise grain will be assigned the same random value.  If ``NO``, each color channel will be set to an independent random value, thereby producing colored noise.\n"}, {"name": "grain_size", "default": 0.0, "description": "Noise grain size (degrees).\n\nThe number of grains in each dimension is rounded to the nearest\ninteger.  Grain sizes less than or equal to the size of one pixel will\nresult in per-pixel randomization.\n"}, {"name": "rand_seed", "description": "Seed value for the random number generator.  If omitted, the current system time in nanoseconds is used.\n"}, {"name": "randomize_on_draw", "default": "NO", "description": "If ``YES``, the stimulus will re-randomize itself every time it draws.\nDrawing may be triggered either explicitly (via an `Update Stimulus\nDisplay` action) or implicitly (e.g. at the request of a running dynamic\nstimulus).\n\nTo generate dynamic white noise that updates on every display refresh,\nuse this parameter in conjuction with a `Frame List Stimulus`::\n\n    frame_list dynamic_noise (\n        stimulus_group = dynamic_noise_frames\n        loop = true\n        autoplay = true\n        )\n\n    stimulus_group dynamic_noise_frames {\n        white_noise_background (\n            randomize_on_draw = true\n            )\n    }\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}], "basename": "white_noise_background", "toplevel": true, "group": ["Stimuli"], "allowed_child": []}, "Randomize White Noise Background": {"name": "Randomize White Noise Background", "signature": "action/randomize_background", "isa": ["Action", "Randomize White Noise Background"], "description": "Re-randomize a `White Noise Background` stimulus\n", "parameters": [{"name": "stimulus", "required": true, "description": "Stimulus to randomize"}], "basename": "randomize_white_noise_background", "group": ["Actions"], "allowed_child": []}, "MSSW Gamepad": {"name": "MSSW Gamepad", "signature": "iodevice/sidewinder_gamepad", "isa": ["IODevice", "MSSW Gamepad"], "platform": ["macos"], "description": "Used for interfacing to a `Microsoft SideWinder\n<https://en.wikipedia.org/wiki/Microsoft_SideWinder>`_ gamepad.\n\nButton state variables are set to 1 if the button is depressed, 0 if\nreleased.\n", "parameters": [{"name": "data_type", "required": true, "options": ["event", "continuous"], "recommended": "event", "description": "If ``event``, variables are updated only when the corresponding button's state changes.  If ``continuous``, variables are updated every `data_interval`_ period of time, even if the corresponding button's state has not changed.\n"}, {"name": "data_interval", "required": true, "example": "50ms", "description": "Button state polling interval (microseconds)"}, {"name": "up", "description": "Variable for D-pad up"}, {"name": "down", "description": "Variable for D-pad down"}, {"name": "left", "description": "Variable for D-pad left"}, {"name": "right", "description": "Variable for D-pad right"}, {"name": "trigger_right", "description": "Variable for right trigger"}, {"name": "trigger_left", "description": "Variable for left trigger"}, {"name": "a", "description": "Variable for A button"}, {"name": "b", "description": "Variable for B button"}, {"name": "x", "description": "Variable for X button"}, {"name": "y", "description": "Variable for Y button"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "mssw_gamepad", "toplevel": true, "group": ["Input/Output"], "allowed_child": []}, "Touch Input Device": {"name": "Touch Input Device", "signature": "iodevice/touch_input", "isa": ["Touch Input Device", "IODevice"], "platform": ["ios"], "description": "Interface to the built-in touchscreen on an iOS device.\n\nThis device detects and tracks the movement of a single touch (e.g. finger)\non the screen.  If the screen is touched in multiple locations\nsimultaneously, only the first detected touch is tracked.  All other touches\nare ignored.\n", "parameters": [{"name": "touch_position_x", "required": true, "description": "Variable in which to store the horizontal position of the touch (in degrees) on the screen\n"}, {"name": "touch_position_y", "required": true, "description": "Variable in which to store the vertical position of the touch (in degrees) on the screen\n"}, {"name": "touch_in_progress", "required": true, "description": "Variable in which to store the touch state (true if a touch is in progress, false otherwise)\n"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "touch_input_device", "toplevel": true, "group": ["Input/Output"], "allowed_child": []}, "EyeLink Device": {"name": "EyeLink Device", "signature": "iodevice/eyelink", "isa": ["IODevice", "EyeLink Device"], "platform": ["macos"], "description": "Digital interface to an `EyeLink <https://www.sr-research.com>`_\neye tracker.  Tested with the `EyeLink 1000/1000 Plus\n<https://www.sr-research.com/products/eyelink-1000-plus/>`_\nand `EyeLink II <https://www.sr-research.com/products/eyelink-ii/>`_\ntrackers, but may be compatible with additional devices.\n\nIf the tracker is run in binocular mode, `eye_x`_, `eye_y`_, and `eye_z`_\ngive the midpoint of the shortest connecting line that is orthogonal to both\ngaze vectors; otherwise, these values will be empty.  All other output\nparameters are specified and described in the EyeLink 1000 User Manual.  If\nan eye tracker packet contains no data for a parameter, EyeLink's\n``MISSING_DATA`` value (-32768) is written to the corresponding variable.\n\n.. rubric:: Calibration\n\nIn order to perform a tracker-driven calibration, validation, or drift\ncorrection, you must arrange for the drawing of a fixation target on MWorks'\nstimulus display at locations and times controlled by the tracker.  This is\naccomplished via the parameters `cal_target_x`_, `cal_target_y`_, and\n`cal_target_visible`_, as demonstrated in the following example::\n\n    // cal_target_x and cal_target_y receive the location of the\n    // fixation target\n    \n    var cal_target_x = 0\n    var cal_target_y = 0\n    \n    circle cal_target (\n        color = 1,0,0\n        x_size = 1\n        x_position = cal_target_x\n        y_position = cal_target_y\n        )\n    \n    // cal_target_visible receives the signal to show or hide\n    // the fixation target.  Attached actions draw or remove\n    // the target as appropriate.\n    \n    var cal_target_visible (false) {\n        choose {\n            when (cal_target_visible) {\n                queue_stimulus (cal_target)\n                update_display ()\n            }\n            otherwise {\n                clear_display ()\n            }\n        }\n    }\n    \n    // All three variable names must be provided as parameters\n    // in the device declaration\n    \n    iodevice/eyelink eyelink (\n        ...\n        cal_target_x = cal_target_x\n        cal_target_y = cal_target_y\n        cal_target_visible = cal_target_visible\n        ...\n        )\n\nTo initiate a calibration, validation, or drift correction, use the\n`EyeLink Tracker Setup` action::\n\n    eyelink_tracker_setup (\n        device = eyelink\n        calibration_type = HV13\n        )\n", "parameters": [{"name": "tracker_ip", "required": true, "example": "100.1.1.1", "description": "The tracker's IP address"}, {"name": "tracking_dist", "example": 1024, "description": "Tracking range in eye tracker units.  (The default value should be\n1024.)\n\nRequired to compute `eye_x`_, `eye_y`_, and `eye_z`_.\n"}, {"name": "data_interval", "required": true, "example": "1ms", "description": "Data polling interval.  Should not be too short, but faster than tracker's sampling rate.\n"}, {"name": "eye_rx", "description": "Variable in which to store right eye screen gaze x"}, {"name": "eye_ry", "description": "Variable in which to store right eye screen gaze y"}, {"name": "eye_lx", "description": "Variable in which to store left eye screen gaze x"}, {"name": "eye_ly", "description": "Variable in which to store left eye screen gaze y"}, {"name": "eye_x", "description": "Variable in which to store computed ``eye_x`` (described above)"}, {"name": "eye_y", "description": "Variable in which to store computed ``eye_y`` (described above)"}, {"name": "eye_z", "description": "Variable in which to store computed ``eye_z`` (described above)"}, {"name": "href_rx", "description": "Variable in which to store right eye headref x"}, {"name": "href_ry", "description": "Variable in which to store right eye headref y"}, {"name": "href_lx", "description": "Variable in which to store left eye headref x"}, {"name": "href_ly", "description": "Variable in which to store left eye headref y"}, {"name": "pupil_rx", "description": "Variable in which to store right eye pupil x"}, {"name": "pupil_ry", "description": "Variable in which to store right eye pupil y"}, {"name": "pupil_lx", "description": "Variable in which to store left eye pupil x"}, {"name": "pupil_ly", "description": "Variable in which to store left eye pupil y"}, {"name": "pupil_size_r", "description": "Variable in which to store right pupil size or area"}, {"name": "pupil_size_l", "description": "Variable in which to store left pupil size or area"}, {"name": "blink_r", "description": "Variable in which to store right eye blink state (true when blinking, false otherwise)\n"}, {"name": "blink_l", "description": "Variable in which to store left eye blink state (true when blinking, false otherwise)\n"}, {"name": "saccade_r", "description": "Variable in which to store right eye saccade state (true when in saccade, false otherwise)\n"}, {"name": "saccade_l", "description": "Variable in which to store left eye saccade state (true when in saccade, false otherwise)\n"}, {"name": "fixation_r", "description": "Variable in which to store right eye fixation state (true when fixating, false otherwise)\n"}, {"name": "fixation_l", "description": "Variable in which to store left eye fixation state (true when fixating, false otherwise)\n"}, {"name": "cal_target_x", "description": "Variable in which to store calibration target x coordinate"}, {"name": "cal_target_y", "description": "Variable in which to store calibration target y coordinate"}, {"name": "cal_target_visible", "description": "Variable in which to store calibration target visibility state (true when the target should be visible, false when it should be hidden)\n"}, {"name": "eye_time", "description": "Variable in which to store time of sample (on EyeLink clock)"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "eyelink_device", "toplevel": true, "group": ["Input/Output"], "allowed_child": []}, "EyeLink Tracker Setup": {"name": "EyeLink Tracker Setup", "signature": "action/eyelink_tracker_setup", "isa": ["EyeLink Tracker Setup", "Action"], "platform": ["macos"], "description": "Prepare for calibration and launch the setup screen of an `EyeLink Device`.\n\nBefore launching the setup screen, this action sets the tracker's\ngaze-position coordinate system (via EyeLink's ``screen_pixel_coords``\ncommand) to match the coordinate system used on MWorks' main stimulus\ndisplay.  It then sets the calibration type (as specified in\n`calibration_type`_), so that the tracker recomputes the positions of\nfixation targets in the new coordinate system.\n\nOnce the EyeLink setup screen has been launched, the user can manually\ninitiate calibration, validation, or drift correction via the EyeLink host\nPC.\n\nThis action can be executed only when the EyeLink device is *stopped* (i.e.\nbefore the experiment invokes `Start IO Device` on it, or after it invokes\n`Stop IO Device`).  Execution continues until the user manually exits the\nsetup screen on the EyeLink host PC.\n", "parameters": [{"name": "device", "required": true, "description": "Name of EyeLink device"}, {"name": "calibration_type", "options": ["H3", "HV3", "HV5", "HV9", "HV13"], "default": "HV9", "description": "Desired calibration type"}], "basename": "eyelink_tracker_setup", "group": ["Actions"], "allowed_child": []}, "ISCAN Device": {"name": "ISCAN Device", "signature": "iodevice/iscan", "isa": ["ISCAN Device", "IODevice"], "platform": ["macos"], "description": "Interface to an `ISCAN <http://www.iscaninc.com/>`_ eye tracking system.\n\nOn the device, the serial I/O baud rate must be set to 115200, and a\nbinary output format must be selected.\n", "parameters": [{"name": "serial_port", "example": "/dev/tty.usbserial-FTH1RRH5", "description": "Filesystem path that represents the serial port to which the ISCAN\ndevice is connected.\n\nIf omitted, MWorks looks for a single, connected serial device.  If it\nfinds one, it assumes it to be the desired ISCAN device and attempts to\nconnect.\n"}, {"name": "output_01", "description": "Variable in which to store output 1"}, {"name": "output_02", "description": "Variable in which to store output 2"}, {"name": "output_03", "description": "Variable in which to store output 3"}, {"name": "output_04", "description": "Variable in which to store output 4"}, {"name": "output_05", "description": "Variable in which to store output 5"}, {"name": "output_06", "description": "Variable in which to store output 6"}, {"name": "start_command", "default": 128, "description": "Command byte used to start recording.  On some systems, the correct value may be 132.\n"}, {"name": "stop_command", "default": 129, "description": "Command byte used to stop recording.  On some systems, the correct value may be 136.\n"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "iscan_device", "toplevel": true, "group": ["Input/Output"], "allowed_child": []}, "Firmata Device": {"name": "Firmata Device", "signature": "iodevice/firmata", "isa": ["Firmata Device", "IODevice"], "allowed_child": ["Firmata Channel"], "description": "Interface to a microcontroller that supports the\n`Firmata protocol <https://github.com/firmata/protocol>`_.\n\nMost `Arduino <https://www.arduino.cc/>`_ boards and compatible devices\n(e.g. `Teensy <http://www.pjrc.com/teensy/>`_) can be configured to support\nthe Firmata protocol via the Arduino\n`Firmata library <https://github.com/firmata/arduino>`_.\n\nThe device can be connected via a serial port or `Bluetooth low energy\n<https://en.wikipedia.org/wiki/Bluetooth_low_energy>`_ (BLE).  If both\n`serial_port`_ and `bluetooth_local_name`_ are omitted, MWorks looks for a\nsingle, connected serial device.  If it finds one, it assumes it to be the\ndesired Firmata device and attempts to connect.\n", "parameters": [{"name": "serial_port", "example": "/dev/cu.usbmodem31", "description": "If the Firmata device is connected via a serial port, this parameter\nspecifies the filesystem path that represents the serial port\n"}, {"name": "bluetooth_local_name", "example": "FIRMATA", "description": "If the Firmata device is connected via Bluetooth low energy, this\nparameter specifies its local name\n"}, {"name": "data_interval", "example": "5ms", "description": "Sampling interval for analog inputs.  Must be a whole number of milliseconds.\n"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "firmata_device", "toplevel": true, "group": ["Input/Output"]}, "Firmata Channel": {"name": "Firmata Channel", "abstract": true, "isa": ["IOChannel", "Firmata Channel"], "basename": "firmata_channel", "group": ["Input/Output"], "allowed_child": []}, "Firmata Analog Input Channel": {"name": "Firmata Analog Input Channel", "signature": "iochannel/firmata_analog_input", "isa": ["Firmata Analog Input Channel", "IOChannel", "Firmata Channel"], "description": "Analog input channel on a `Firmata Device`", "parameters": [{"name": "pin_number", "required": true, "example": ["a0", "A3", 17], "description": "Input pin number"}, {"name": "value", "required": true, "description": "Variable in which to store input values.  The value is always between 0 and 1 (inclusive) and indicates the fraction of the device's operating voltage (typically 5V or 3.3V) measured on the input pin.\n"}], "basename": "firmata_analog_input_channel", "group": ["Input/Output"], "allowed_child": []}, "Firmata Analog Output Channel": {"name": "Firmata Analog Output Channel", "signature": "iochannel/firmata_analog_output", "isa": ["IOChannel", "Firmata Analog Output Channel", "Firmata Channel"], "description": "Analog output channel on a `Firmata Device`.\n\n*Note*:  Most Firmata-compatible devices do not support true analog output.\nInstead, they simulate it using `pulse-width modulation\n<https://en.wikipedia.org/wiki/Pulse-width_modulation>`_ (PWM).  Therefore,\nthe actual output voltage will cycle between the minimum and maximum\nvoltages supported by the device, producing a time-average voltage that\napproximates the desired value.\n", "parameters": [{"name": "pin_number", "required": true, "example": 3, "description": "Output pin number"}, {"name": "value", "required": true, "description": "Variable from which to read output values.  The value must be between 0 and 1 (inclusive) and indicates the fraction of the device's operating voltage (typically 5V or 3.3V) to output on the specified pin.\n"}], "basename": "firmata_analog_output_channel", "group": ["Input/Output"], "allowed_child": []}, "Firmata Digital Input Channel": {"name": "Firmata Digital Input Channel", "signature": "iochannel/firmata_digital_input", "isa": ["IOChannel", "Firmata Digital Input Channel", "Firmata Channel"], "description": "Digital input channel on a `Firmata Device`", "parameters": [{"name": "pin_number", "required": true, "example": 13, "description": "Input pin number"}, {"name": "value", "required": true, "description": "Variable in which to store input state (true or false)\n"}], "basename": "firmata_digital_input_channel", "group": ["Input/Output"], "allowed_child": []}, "Firmata Digital Input Pullup Channel": {"name": "Firmata Digital Input Pullup Channel", "signature": "iochannel/firmata_digital_input_pullup", "isa": ["IOChannel", "Firmata Digital Input Pullup Channel", "Firmata Channel"], "description": "Digital input pullup channel on a `Firmata Device`.\n\nUnlike a standard `digital input channel <Firmata Digital Input Channel>`,\na digital input pullup channel enables the built-in pullup resistor for its\nassociated pin.  This causes the input to be high/true when unconnected and\nlow/false when connected to ground. For more information, see the Arduino\ndocumentation on  `digital pins\n<https://www.arduino.cc/en/Tutorial/DigitalPins>`_.\n", "parameters": [{"name": "pin_number", "required": true, "example": 8, "description": "Input pin number"}, {"name": "value", "required": true, "description": "Variable in which to store input state (true or false)\n"}], "basename": "firmata_digital_input_pullup_channel", "group": ["Input/Output"], "allowed_child": []}, "Firmata Digital Output Channel": {"name": "Firmata Digital Output Channel", "signature": "iochannel/firmata_digital_output", "isa": ["IOChannel", "Firmata Digital Output Channel", "Firmata Channel"], "description": "Digital output channel on a `Firmata Device`", "parameters": [{"name": "pin_number", "required": true, "example": 4, "description": "Output pin number"}, {"name": "value", "required": true, "description": "Variable from which to read output state (true or false).  `Assigning <Assign Variable>` a value to the variable causes the output state to be changed immediately.\n"}], "basename": "firmata_digital_output_channel", "group": ["Input/Output"], "allowed_child": []}, "Firmata Word Output Channel": {"name": "Firmata Word Output Channel", "signature": "iochannel/firmata_word_output", "isa": ["Firmata Word Output Channel", "IOChannel", "Firmata Channel"], "description": "Word output channel on a `Firmata Device`", "parameters": [{"name": "pin_numbers", "required": true, "example": ["2,3,4", "5:8", "a5,10:12,A3"], "description": "Pins used to output the individual bits of words assigned to `value`_. The first pin receives the least significant bit, the last pin the most significant.\n"}, {"name": "value", "required": true, "description": "Variable from which to read output word (an integer).  `Assigning <Assign Variable>` a value to the variable causes the state of the pins specified in `pin_numbers`_ to be changed immediately.\n"}], "basename": "firmata_word_output_channel", "group": ["Input/Output"], "allowed_child": []}, "Firmata Servo Channel": {"name": "Firmata Servo Channel", "signature": "iochannel/firmata_servo", "isa": ["IOChannel", "Firmata Servo Channel", "Firmata Channel"], "description": "Servo channel on a `Firmata Device`", "parameters": [{"name": "pin_number", "required": true, "example": 8, "description": "Pin number"}, {"name": "value", "required": true, "description": "Variable from which to read servo values.  The value must be between 0 and 180 (inclusive) and indicates the desired shaft angle or speed of the servo.\n"}, {"name": "min_pulse_width", "default": 544, "description": "Pulse width (in microseconds) corresponding to the minimum (0-degree) angle on the servo\n"}, {"name": "max_pulse_width", "default": 2400, "description": "Pulse width (in microseconds) corresponding to the maximum (180-degree) angle on the servo\n"}], "basename": "firmata_servo_channel", "group": ["Input/Output"], "allowed_child": []}, "Blackrock LED Driver": {"name": "Blackrock LED Driver", "signature": "iodevice/blackrock_led_driver", "isa": ["Blackrock LED Driver", "IODevice"], "platform": ["macos"], "description": "Interface to a Blackrock LED array driver", "parameters": [{"name": "running", "description": "Variable to set to true when the LED program starts running, false when it stops\n"}, {"name": "temp_a", "description": "Variable in which to store thermistor readout from bank A (reported in degrees Celsius)\n"}, {"name": "temp_b", "description": "Variable in which to store thermistor readout from bank B (reported in degrees Celsius)\n"}, {"name": "temp_c", "description": "Variable in which to store thermistor readout from bank C (reported in degrees Celsius)\n"}, {"name": "temp_d", "description": "Variable in which to store thermistor readout from bank D (reported in degrees Celsius)\n"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "blackrock_led_driver", "toplevel": true, "group": ["Input/Output"], "allowed_child": []}, "Set Blackrock LED Driver Channel Intensity": {"name": "Set Blackrock LED Driver Channel Intensity", "signature": "action/blackrock_led_driver_set_intensity", "isa": ["Set Blackrock LED Driver Channel Intensity", "Action"], "platform": ["macos"], "description": "Set the intensity of one or more channels on a `Blackrock LED Driver`\n", "parameters": [{"name": "device", "required": true, "description": "Device name"}, {"name": "channels", "required": true, "example": [16, "1,3,5", "1:64", "7,10:15,28"], "description": "Channel number(s)"}, {"name": "value", "required": true, "description": "Intensity (floating-point value between 0 and 1)"}], "basename": "set_blackrock_led_driver_channel_intensity", "group": ["Actions"], "allowed_child": []}, "Prepare Blackrock LED Driver": {"name": "Prepare Blackrock LED Driver", "signature": "action/blackrock_led_driver_prepare", "isa": ["Prepare Blackrock LED Driver", "Action"], "platform": ["macos"], "description": "Prepare a `Blackrock LED Driver` to run for the specified duration.  The desired channel intensities must have been `set <Set Blackrock LED Driver Channel Intensity>` previously.\n", "parameters": [{"name": "device", "required": true, "description": "Device name"}, {"name": "duration", "required": true, "description": "Run duration (microseconds)"}], "basename": "prepare_blackrock_led_driver", "group": ["Actions"], "allowed_child": []}, "Run Blackrock LED Driver": {"name": "Run Blackrock LED Driver", "signature": "action/blackrock_led_driver_run", "isa": ["Action", "Run Blackrock LED Driver"], "platform": ["macos"], "description": "Run a `Blackrock LED Driver` for the specified duration.  The desired\nchannel intensities must have been `set <Set Blackrock LED Driver Channel\nIntensity>` previously.\n\nIf the duration or any channel intensities have changed since the last run,\nthe complete LED program must be sent to the driver before the presentation\ncan begin.  This transfer takes about 100ms to complete.  If this delay is\nundesirable, you can force it to happen at an earlier, more convenient time\nby invoking `Prepare Blackrock LED Driver` with the desired duration.  (Note\nthat you *must* pass the same duration to both \"prepare\" and \"run\", and you\n*must not* change any channel intensities between them.  Otherwise, the LED\nprogram will still need to be re-sent before the presentation begins.)\n", "parameters": [{"name": "device", "required": true, "description": "Device name"}, {"name": "duration", "required": true, "description": "Run duration (microseconds)"}], "basename": "run_blackrock_led_driver", "group": ["Actions"], "allowed_child": []}, "Read Blackrock LED Driver Temperatures": {"name": "Read Blackrock LED Driver Temperatures", "signature": "action/blackrock_led_driver_read_temps", "isa": ["Action", "Read Blackrock LED Driver Temperatures"], "platform": ["macos"], "description": "Read the thermistor temperatures from a `Blackrock LED Driver`.  The temperature values are stored in the variables specified in the device definition.\n", "parameters": [{"name": "device", "required": true, "description": "Device name"}], "basename": "read_blackrock_led_driver_temperatures", "group": ["Actions"], "allowed_child": []}, "Fake Monkey IO Device": {"name": "Fake Monkey IO Device", "signature": "iodevice/fake_monkey", "isa": ["IODevice", "Fake Monkey IO Device"], "platform": ["macos"], "allowed_child": ["Fake Monkey Channel"], "description": "A simulated monkey that has the ability to generate spikes and continuous eye position data\n", "parameters": [{"name": "spike_rate", "default": 25, "description": "Average rate of spike generation (spikes per second).  The actual times between individual spikes are drawn from an `exponential distribution <https://en.wikipedia.org/wiki/Exponential_distribution>`_ with lambda equal to the specified spike rate.\n"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "fake_monkey_io_device", "toplevel": true, "group": ["Input/Output"]}, "Fake Monkey Channel": {"name": "Fake Monkey Channel", "abstract": true, "isa": ["IOChannel", "Fake Monkey Channel"], "platform": ["macos"], "basename": "fake_monkey_channel", "group": ["Input/Output"], "allowed_child": []}, "Fake Monkey Eye Channel": {"name": "Fake Monkey Eye Channel", "signature": "iochannel/eye_movement", "isa": ["IOChannel", "Fake Monkey Eye Channel", "Fake Monkey Channel"], "description": "Provides simulated raw horizontal and vertical eye position data from a `Fake Monkey IO Device`\n", "parameters": [{"name": "eye_h", "required": true, "description": "Variable in which to store simulated horizontal eye position (in degrees)\n"}, {"name": "eye_v", "required": true, "description": "Variable in which to store simulated vertical eye position (in degrees)\n"}, {"name": "data_interval", "required": true, "example": "1ms", "description": "Interval between simulated eye position samples (microseconds)\n"}, {"name": "update_interval", "required": true, "example": "10ms", "description": "Interval between eye position updates (microseconds).  If larger than `data_interval`_, multiple eye positions will be generated during each update.\n"}], "basename": "fake_monkey_eye_channel", "group": ["Input/Output"], "allowed_child": [], "platform": ["macos"]}, "Fake Monkey Juice Channel": {"name": "Fake Monkey Juice Channel", "signature": "iochannel/juice", "isa": ["IOChannel", "Fake Monkey Juice Channel", "Fake Monkey Channel"], "description": "Simulates dispensing juice to a `Fake Monkey IO Device`\n", "parameters": [{"name": "variable", "required": true, "description": "Variable used to trigger simulated juice dispensing.  Whenever the variable's value changes, MWorks logs a message (to the event stream and server console) indicating that juice was dispensed.\n"}], "basename": "fake_monkey_juice_channel", "group": ["Input/Output"], "allowed_child": [], "platform": ["macos"]}, "Fake Monkey Spike Channel": {"name": "Fake Monkey Spike Channel", "signature": "iochannel/spike", "isa": ["IOChannel", "Fake Monkey Spike Channel", "Fake Monkey Channel"], "description": "Provides simulated spikes from a `Fake Monkey IO Device`\n", "parameters": [{"name": "variable", "required": true, "description": "Variable to set to ``1`` whenever a new spike is generated\n"}], "basename": "fake_monkey_spike_channel", "group": ["Input/Output"], "allowed_child": [], "platform": ["macos"]}, "Fake Monkey Fixate": {"name": "Fake Monkey Fixate", "signature": "action/fake_monkey_fixate", "isa": ["Action", "Fake Monkey Fixate"], "platform": ["macos"], "description": "Causes a `Fake Monkey IO Device` to fixate at the current eye position for a specified duration\n", "parameters": [{"name": "fake_monkey", "required": true, "description": "Fake monkey device"}, {"name": "duration", "required": true, "description": "Fixation duration (microseconds)"}], "basename": "fake_monkey_fixate", "group": ["Actions"], "allowed_child": []}, "Fake Monkey Saccade": {"name": "Fake Monkey Saccade", "signature": "action/fake_monkey_saccade_to_location", "isa": ["Action", "Fake Monkey Saccade"], "platform": ["macos"], "description": "Causes a `Fake Monkey IO Device` to saccade to the specified location\n", "parameters": [{"name": "fake_monkey", "required": true, "description": "Fake monkey device"}, {"name": "h", "required": true, "description": "Horizontal target position (degrees)"}, {"name": "v", "required": true, "description": "Vertical target position (degrees)"}], "basename": "fake_monkey_saccade", "group": ["Actions"], "allowed_child": []}, "Fake Monkey Saccade and Fixate": {"name": "Fake Monkey Saccade and Fixate", "signature": "action/fake_monkey_saccade_and_fixate", "isa": ["Fake Monkey Saccade and Fixate", "Action"], "platform": ["macos"], "description": "Causes a `Fake Monkey IO Device` to saccade to the specified location and fixate for the specified duration\n", "parameters": [{"name": "fake_monkey", "required": true, "description": "Fake monkey device"}, {"name": "h", "required": true, "description": "Horizontal target position (degrees)"}, {"name": "v", "required": true, "description": "Vertical target position (degrees)"}, {"name": "duration", "required": true, "description": "Fixation duration (microseconds)"}], "basename": "fake_monkey_saccade_and_fixate", "group": ["Actions"], "allowed_child": []}, "Text Stimulus": {"name": "Text Stimulus", "signature": "stimulus/text", "isa": ["Basic Transform Stimulus", "Text Stimulus", "Stimulus", "Transform Stimulus", "Colored Transform Stimulus"], "description": "A stimulus that renders user-specified text within a rectangular region\n", "parameters": [{"name": "text", "required": true, "example": ["Hello, world!", "\"Good morning\""], "description": "Text to display"}, {"name": "font_name", "required": true, "example": ["Helvetica Neue", "\"Courier\""], "description": "Font name"}, {"name": "font_size", "required": true, "example": 24, "description": "Font size (points)"}, {"name": "text_alignment", "options": ["left", "right", "center"], "default": "left", "description": "Text alignment"}, {"name": "color", "default": "1.0,1.0,1.0", "description": "The color of the stimulus, expressed as a comma-separated list of red, green, and blue components.  Each component may be described by any valid expression, but the expression must result in a value between 0 and 1 (inclusive).\n"}, {"name": "alpha_multiplier", "default": 1.0, "description": "Controls the transparency of the stimulus.  ``1.0`` is fully opaque, while ``0.0`` is fully tranparent.\n"}, {"name": "x_size", "example": 5.0, "description": "Horizontal size (degrees).\n\nIf omitted, the value of `y_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "y_size", "example": 5.0, "description": "Vertical size (degrees).\n\nIf omitted, the value of `x_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "x_position", "default": 0.0, "description": "Horizontal center position (degrees)"}, {"name": "y_position", "default": 0.0, "description": "Vertical center position (degrees)"}, {"name": "rotation", "default": 0.0, "description": "Rotation (degrees)"}, {"name": "fullscreen", "default": "NO", "description": "If ``YES``, the stimulus is sized to fill the display.  In this mode, `x_size`_, `y_size`_, `x_position`_, `y_position`_, and `rotation`_ are ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}], "basename": "text_stimulus", "toplevel": true, "group": ["Stimuli"], "allowed_child": []}, "Python File Resource": {"name": "Python File Resource", "signature": "resource/python_file", "isa": ["Resource", "Python File Resource"], "description": "A special type of `resource file <Resources>` that contains Python source\ncode.\n\nThe file is executed when the experiment loads.  The execution takes place\nafter all experiment-defined `variables <Variables>` have been created, but\nbefore any other components are created.  Therefore, the Python code can set\nvariable values or perform additional initialization tasks, and other\ncomponents can make use of the results.\n\nFor information on the modules and functions available to your Python code,\nsee `Run Python File`.\n", "parameters": [{"name": "path", "required": true, "description": "Filesystem path to the Python source file"}], "basename": "python_file_resource", "toplevel": true, "group": ["Resources"], "allowed_child": []}, "Run Python Action": {"name": "Run Python Action", "abstract": true, "isa": ["Action", "Run Python Action"], "parameters": [{"name": "stop_on_failure", "default": "NO", "description": "If ``YES``, the experiment will stop automatically if Python execution fails\n"}], "basename": "run_python_action", "group": ["Actions"], "allowed_child": []}, "Run Python File": {"name": "Run Python File", "signature": "action/run_python_file", "isa": ["Run Python Action", "Run Python File", "Action"], "description": "Execute the specified file as `Python <https://www.python.org>`_ source\ncode.\n\n.. rubric:: Available Modules and Functions\n\nPython code executed by `Run Python File`, `Run Python String`, a `Python\nFile Resource`, or the `expression parser <Expressions>` functions\n``py_eval`` and ``py_call`` can make use of both the `Python standard\nlibrary <https://docs.python.org/3/library/index.html>`_ and `NumPy\n<https://www.numpy.org>`_.  In addition, the following MWorks-specific\nfunctions are available:\n\n``getvar(name)``\n    Returns the value of an MWorks variable.  ``name`` is a string\n    containing the name of the variable.\n\n``setvar(name, value)``\n    Sets the value of an MWorks variable.  ``name`` is a string containing\n    the name of the variable, and ``value`` is the new value to assign.\n\n``getcodec()``\n    Returns the code-to-name mapping for variables (as a dictionary).\n\n``get_reverse_codec()``\n    Returns the name-to-code mapping for variables (as a dictionary).\n\n``register_event_callback(name, callback)``\n    Registers an event callback function for an MWorks variable.  ``name``\n    is a string containing the name of the variable, and ``callback`` is a\n    Python function as described below.\n\n``register_event_callback(code, callback)``\n    Registers an event callback function for an MWorks variable.  ``code``\n    is the integer code corresponding to the variable, and ``callback`` is a\n    Python function as described below.\n\n``register_event_callback(callback)``\n    Registers an event callback function for *all* MWorks variables.\n    ``callback`` is a Python function as described below.  (*Note*: The\n    callback function will be invoked very, very frequently.  Use with\n    caution!)\n\n``unregister_event_callbacks()``\n    Unregisters all event callback functions previously registered via\n    Python code.\n\n``message(msg)``\n    Generates a normal MWorks message (like `Report / Message`).  ``msg``\n    can be any value, which, after conversion to a string, is used as the\n    text of the message.\n\n``warning(msg)``\n    Generates an MWorks warning message.  ``msg`` can be any value, which,\n    after conversion to a string, is used as the text of the message.\n\n``error(msg)``\n    Generates an MWorks error message.  ``msg`` can be any value, which,\n    after conversion to a string, is used as the text of the message.\n\nEvent callback functions are invoked whenever a value is assigned to the\nvariable of interest.  They receive a single argument of type ``Event``,\nwhich has attributes ``code``, ``time``, and ``data``.  The values of\n``code`` and ``time`` are always integers, while the value of ``data`` can\nbe a boolean, integer, float, string, list, or dictionary.\n\nAll MWorks-specific functions are pre-imported in to the ``__main__``\nmodule, in which the user-provided Python file or string executes.  To use\nthem in other modules, import them from ``mworkscore``, e.g.\n\n.. code:: python\n\n    from mworkscore import getvar, setvar\n\n.. rubric:: Execution Environment\n\nAll user-provided Python code is executed within Python's ``__main__``\nmodule. This means that any variables, functions, classes, etc. defined by\none Python action or resource file are available to all subsequent ones.\n\nDue to limitations in the Python interpreter, the Python environment is\n*not* reset when a new experiment is loaded.  If your Python code expects to\nrun in a \"clean slate\" environment, it will have to perform the necessary\ncleanup actions itself.\n\nAlso, event callback functions are never unregistered automatically.  They\nmust be removed explicitly via ``unregister_event_callbacks()``.\n", "parameters": [{"name": "path", "required": true, "description": "Filesystem path to the Python source file"}, {"name": "stop_on_failure", "default": "NO", "description": "If ``YES``, the experiment will stop automatically if Python execution fails\n"}], "basename": "run_python_file", "group": ["Actions"], "allowed_child": []}, "Run Python String": {"name": "Run Python String", "signature": "action/run_python_string", "isa": ["Action", "Run Python Action", "Run Python String"], "description": "Execute the given string as `Python <https://www.python.org>`_ source code.\n\nFor information on the modules and functions available to your Python code,\nsee `Run Python File`.\n", "parameters": [{"name": "code", "required": true, "description": "Python code to execute"}, {"name": "stop_on_failure", "default": "NO", "description": "If ``YES``, the experiment will stop automatically if Python execution fails\n"}], "basename": "run_python_string", "group": ["Actions"], "allowed_child": []}, "Open Ephys Interface": {"name": "Open Ephys Interface", "signature": "iodevice/open_ephys_interface", "isa": ["Open Ephys Interface", "IODevice"], "platform": ["macos"], "description": "Interface to the `Open Ephys GUI <http://www.open-ephys.org/gui/>`_\napplication.  Requires an Open Ephys Event Broadcaster module listening on\nthe specified `hostname`_ and `port`_.\n\nThe primary function of this component is to compute the offset between the\nOpen Ephys and MWorks clocks.  To enable this, your experiment must send\nperiodic synchronization words to TTL inputs on the Open Ephys acquisition\nboard.  Although this component does not send the synchronization signals\nitself, it must be made aware of them via the `sync`_ and `sync_channels`_\nparameters.\n\nAdditionally, this component can receive information on `spikes`_ detected\nby an Open Ephys `Spike Detector <https://open-\nephys.atlassian.net/wiki/display/OEW/Spike+Detector>`_ or `Spike Sorter\n<https://open-ephys.atlassian.net/wiki/display/OEW/Spike+Sorter>`_ module.\n(Note that the Event Broadcaster must appear *after* the spike detection\nmodule in the signal chain.)\n", "parameters": [{"name": "hostname", "required": true, "example": ["localhost", "dicarlo-open-ephys-12.mit.edu"], "description": "Hostname of the computer running the Open Ephys GUI\n"}, {"name": "port", "required": true, "example": 5557, "description": "TCP port used by the Event Broadcaster module\n"}, {"name": "sync", "required": true, "description": "Variable from which to read synchronization words sent to TTL inputs on the Open Ephys acquisition board.  Assigning to the variable should also initiate transmission of the TTL signals (e.g. by associating it with a digital output channel on another `Input/Output` device).\n"}, {"name": "sync_channels", "required": true, "example": ["0,1", "4:7", "1,4:6,7"], "description": "TTL input channels on the Open Ephys acquisition board to which synchronization words are sent.  The first channel should receive the least significant bit, the last channel the most significant.\n"}, {"name": "clock_offset", "description": "Variable in which to store computed offsets between the Open Ephys and MWorks clocks.\nDividing an Open Ephys time (i.e. sample number) by the sampling rate and adding this offset (reported in microseconds) yields the corresponding MWorks time.\n"}, {"name": "spikes", "description": "Variable in which to store information on detected spikes.\n\nFor every spike event it receives from Open Ephys, MWorks will assign a\nnew value to this variable.  The value will be a dictionary with the\nfollowing fields:\n\noe_timestamp\n  Timestamp on Open Ephys clock (i.e. sample number)\n\nsorted_id\n  Sorted unit ID (or 0 if unsorted)\n\nelectrode_id\n  Electrode ID\n\nchannel\n  Channel in which threshold crossing was detected (relevant only for\n  stereotrodes and tetrodes)\n\nThe MWorks timestamp on the value (i.e. the time recorded in the event\nfile) will be the Open Ephys timestamp converted to MWorks' clock (using\nthe computed clock offset).  This enables direct comparison of spike\ntimes with the times of other events.\n"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "open_ephys_interface", "toplevel": true, "group": ["Input/Output"], "allowed_child": []}, "Open Ephys Network Events Client": {"name": "Open Ephys Network Events Client", "signature": "iodevice/open_ephys_network_events_client", "isa": ["Open Ephys Network Events Client", "IODevice"], "platform": ["macos"], "description": "Interface to a `Network Events <https://open- ephys.atlassian.net/wiki/display/OEW/Network+Events>`_ module in the `Open Ephys GUI <http://www.open-ephys.org/gui/>`_ application\n", "parameters": [{"name": "hostname", "required": true, "example": ["localhost", "dicarlo-open-ephys-12.mit.edu"], "description": "Hostname of the computer running the Open Ephys GUI\n"}, {"name": "port", "required": true, "example": 5556, "description": "TCP port used by the Network Events module\n"}, {"name": "request", "required": true, "description": "Variable from which to read messages to send to the Network Events\nmodule.\n\n`Assigning <Assign Variable>` a value to the variable causes the message\nto be sent immediately.  The assignment action will not complete until a\nresponse is received or an error or timeout occurs.\n\nNon-string values are converted to strings before being sent.\n"}, {"name": "response", "required": true, "description": "Variable in which to store responses from the Network Events module. Response values are always strings.\n"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "open_ephys_network_events_client", "toplevel": true, "group": ["Input/Output"], "allowed_child": []}, "NE-500 Syringe Pump Network": {"name": "NE-500 Syringe Pump Network", "signature": "iodevice/ne500", "isa": ["NE-500 Syringe Pump Network", "IODevice"], "platform": ["macos"], "allowed_child": ["NE-500 Syringe Pump"], "description": "Used for interfacing to a network of `NE-500 syringe pumps <http://www.syringepump.com/oem.php#aa>`_, accessed via a serial-to-ethernet bridge or a USB-to-serial adapter\n", "parameters": [{"name": "address", "example": ["\"10.0.254.254\"", "/dev/cu.usbserial-FTH1RRH5"], "description": "If `port`_ is provided, the address is taken to be a host name,\nand MWorks attempts to connect to the pump network via a\n`TCP <https://en.wikipedia.org/wiki/Transmission_Control_Protocol>`_\nsocket.  Otherwise, the address is assumed to be a filesystem path that\nrepresents a serial port.\n\nIf neither address nor port is provided, MWorks looks for a single,\nconnected serial device.  If it finds one, it assumes it to be the\ndesired pump network and attempts to connect.\n"}, {"name": "port", "example": 100, "description": "Port number for TCP connections"}, {"name": "response_timeout", "default": "100ms", "description": "Maximum time to wait for responses to pump commands (microseconds).  If no response is received in the allotted time, issue an error message.\n"}, {"name": "log_pump_commands", "default": "YES", "description": "If ``YES``, log all commands sent to and responses received from the pump network to the MWorks event stream and server console\n"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "ne_500_syringe_pump_network", "toplevel": true, "group": ["Input/Output"]}, "NE-500 Syringe Pump": {"name": "NE-500 Syringe Pump", "signature": "iochannel/ne500", "isa": ["NE-500 Syringe Pump", "IOChannel"], "platform": ["macos"], "description": "Used for interfacing to a specific pump within a `NE-500 Syringe Pump Network`\n", "parameters": [{"name": "capability", "required": true, "example": "00", "description": "Network address of pump (0 to 99)"}, {"name": "syringe_diameter", "required": true, "example": 15.0, "description": "Syringe diameter (millimeters)"}, {"name": "flow_rate", "required": true, "example": 5, "description": "Pumping rate (units given by `rate_unit`_)"}, {"name": "rate_unit", "options": ["UM", "MM", "UH", "MH"], "default": "MM", "description": "Units of `flow_rate`_.  The options are uL/min, mL/min, uL/hr, and mL/hr.\n"}, {"name": "variable", "required": true, "description": "Variable from which to read the volume to dispense.  Assigning a nonzero value to the variable causes MWorks to prepare the pump's onboard dispensing program (updating rate, volume, and direction as needed). If the pump network is `enabled <Start IO Device>`, pumping will then begin.\n"}, {"name": "volume_unit", "options": ["UL", "ML"], "description": "Volume units.\n\nIf omitted, volume units are determined by `syringe_diameter`_.  If the\nsyringe diameter is less than or equal to 14mm, UL is used.  Otherwise,\nML is used.\n"}], "basename": "ne_500_syringe_pump", "group": ["Input/Output"], "allowed_child": []}, "Layer Stimulus": {"name": "Layer Stimulus", "signature": "stimulus/layer", "isa": ["Stimulus", "Layer Stimulus"], "allowed_child": ["Stimulus"], "description": "Layers are useful only in conjuction with `masks <Mask Stimulus>`.\n\nA layer is a container for other stimuli.  When displayed, it first renders\nits child stimuli into a single scene, against a transparent background.  It\nthen draws this composite scene on the stimulus display.  If one of its\nchildren is a mask, the \"masked out\" regions become transparent or semi-\ntransparent \"windows\", through which any stimuli below the layer are\nvisible.\n\nFor example, when displayed together, the following stimuli produce a red\ncircle inside a green square::\n\n    rectangle the_background (\n        color = 0,1,0\n        x_size = 10\n        )\n\n    layer the_layer {\n        rectangle (\n            color = 1,0,0\n            x_size = 10\n            )\n        mask (\n            mask = ellipse\n            x_size = 10\n            )\n    }\n", "basename": "layer_stimulus", "toplevel": true, "group": ["Stimuli"], "parameters": [{"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}]}, "Mask Stimulus": {"name": "Mask Stimulus", "signature": "stimulus/mask", "isa": ["Mask Stimulus", "Stimulus", "Transform Stimulus"], "description": "Masks are useful only in conjuction with `layers <Layer Stimulus>`.\n\nA mask can truncate, obscure, or erase stimuli in its layer that lie below\nit.  The \"masked out\" regions become transparent or semi-transparent\n\"windows\", through which any stimuli below the layer are visible.  If the\nmask is `inverted`_, it will make a \"hole\" through the stimuli under it,\nallowing the stimuli beneath the layer to show through.\n\nFor example, the following layer will produce a red ring with inner radius\n5 and outer radius 10::\n\n    layer the_layer {\n        circle (\n            color = 1,0,0\n            x_size = 20\n            )\n        mask (\n            mask = ellipse\n            inverted = true\n            x_size = 10\n            )\n    }\n", "parameters": [{"name": "mask", "required": true, "options": ["rectangle", "ellipse", "gaussian", "raised_cosine"], "description": "Mask type"}, {"name": "inverted", "default": "NO", "description": "If ``YES``, the effect of the mask is inverted: Areas of the display that normally would be visible through the mask are hidden, and areas that normally would be hidden are visible.\n"}, {"name": "std_dev", "default": 1.0, "description": "Standard deviation of Gaussian mask"}, {"name": "mean", "default": 0.0, "description": "Mean of Gaussian mask.\n\nThis value determines the radial offset of the Gaussian peak from the\ncenter of the mask.  If non-zero, the peak will be a circle, rather than\na point, and luminance will decrease both inside and outside the circle,\nproducing a toroidal mask.\n"}, {"name": "normalized", "default": "NO", "description": "If ``YES``, the Gaussian mask includes a multiplicative normalization term (``1/(std_dev*sqrt(2*pi))``).  If ``NO``, this term is omitted.\n"}, {"name": "edge_width", "default": 0.125, "description": "Edge width of raised cosine mask.\n\nThis value specifies the width of the sinusoidal edge as a fraction of\nthe total width (i.e. diameter) of the mask.  It should be greater than\nzero and less than or equal to 0.5.\n"}, {"name": "x_size", "example": 5.0, "description": "Horizontal size (degrees).\n\nIf omitted, the value of `y_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "y_size", "example": 5.0, "description": "Vertical size (degrees).\n\nIf omitted, the value of `x_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "x_position", "default": 0.0, "description": "Horizontal center position (degrees)"}, {"name": "y_position", "default": 0.0, "description": "Vertical center position (degrees)"}, {"name": "rotation", "default": 0.0, "description": "Rotation (degrees)"}, {"name": "fullscreen", "default": "NO", "description": "If ``YES``, the stimulus is sized to fill the display.  In this mode, `x_size`_, `y_size`_, `x_position`_, `y_position`_, and `rotation`_ are ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}], "basename": "mask_stimulus", "toplevel": true, "group": ["Stimuli"], "allowed_child": []}, "Drifting Grating Stimulus": {"name": "Drifting Grating Stimulus", "signature": "stimulus/drifting_grating", "isa": ["Basic Transform Stimulus", "Drifting Grating Stimulus", "Stimulus", "Transform Stimulus", "Colored Transform Stimulus", "Dynamic Stimulus Base"], "description": "A drifting grating stimulus", "parameters": [{"name": "direction", "default": 0.0, "description": "Direction of drift (degrees)"}, {"name": "starting_phase", "default": 0.0, "description": "Starting phase (degrees)"}, {"name": "spatial_frequency", "required": true, "example": 1, "description": "Spatial frequency (cycles per degree)"}, {"name": "speed", "required": true, "example": 1, "description": "Drift speed (degrees per second)"}, {"name": "compute_phase_incrementally", "default": "NO", "description": "If ``NO``, the current phase of the grating is computed from\n`starting_phase`_, `spatial_frequency`_, `speed`_, and the total time\nelapsed  since the stimulus started playing.\n\nIf ``YES``, the current phase is computed from the previous phase (i.e.\nthe phase when the stimulus was last drawn), `spatial_frequency`_,\n`speed`_, and the time elapsed since the previous phase was computed.\n\nThis parameter is relevant only when the stimulus is `live queued <Live\nQueue Stimulus>` and the values of `starting_phase`_,\n`spatial_frequency`_, and/or `speed`_ are changed while the stimulus is\nplaying.  Most notably, if the parameter's value is ``NO``, then changes\nto `speed`_ will cause a discontinuous jump in phase.  If the value is\n``YES``, then changes to `speed`_ will be smooth, with no phase jump.\n"}, {"name": "grating_type", "required": true, "options": ["sinusoid", "square", "triangle", "sawtooth"], "description": "Grating type"}, {"name": "mask", "default": "NO", "description": "If ``YES``, the grating will function as a mask (similar to a `Mask\nStimulus`).  When used as part of a `layer <Layer Stimulus>`, \"high\"\nregions of the grating (where the value is close to one) will allow\nstimuli beneath it in the layer to show through, while \"low\" regions\n(where the value is near zero) will partially or fully erase such\nstimuli, exposing any stimuli beneath the layer.\n\nWhen the value of this parameter is ``YES``, `color`_ and\n`alpha_multiplier`_ are ignored.\n\n*Note*: For compatibility with existing experiments, the value of this\nparameter can also be one of ``rectangle``, ``ellipse``, or\n``gaussian``, in which case it specifies the type of mask to apply to\nthe grating.  However, this usage is deprecated, and new experiments\nshould use a `Mask Stimulus` instead.\n"}, {"name": "inverted", "default": "NO", "description": "If ``YES``, all grating values are inverted, e.g. high values become low, and low values become high\n"}, {"name": "std_dev", "default": 1.0, "deprecated": true, "description": "Standard deviation of Gaussian mask"}, {"name": "mean", "default": 0.0, "deprecated": true, "description": "Mean of Gaussian mask.\n\nThis value determines the radial offset of the Gaussian peak from the\ncenter of the grating.  If non-zero, the peak will be a circle, rather\nthan a point, and luminance will decrease both inside and outside the\ncircle, producing a toroidal stimulus.\n"}, {"name": "normalized", "default": "YES", "deprecated": true, "description": "If ``YES``, the Gaussian mask includes a multiplicative normalization term (``1/(std_dev*sqrt(2*pi))``).  If ``NO``, this term is omitted.\n"}, {"name": "color", "default": "1.0,1.0,1.0", "description": "The color of the stimulus, expressed as a comma-separated list of red, green, and blue components.  Each component may be described by any valid expression, but the expression must result in a value between 0 and 1 (inclusive).\n"}, {"name": "alpha_multiplier", "default": 1.0, "description": "Controls the transparency of the stimulus.  ``1.0`` is fully opaque, while ``0.0`` is fully tranparent.\n"}, {"name": "x_size", "example": 5.0, "description": "Horizontal size (degrees).\n\nIf omitted, the value of `y_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "y_size", "example": 5.0, "description": "Vertical size (degrees).\n\nIf omitted, the value of `x_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "x_position", "default": 0.0, "description": "Horizontal center position (degrees)"}, {"name": "y_position", "default": 0.0, "description": "Vertical center position (degrees)"}, {"name": "rotation", "default": 0.0, "description": "Rotation (degrees)"}, {"name": "fullscreen", "default": "NO", "description": "If ``YES``, the stimulus is sized to fill the display.  In this mode, `x_size`_, `y_size`_, `x_position`_, `y_position`_, and `rotation`_ are ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}, {"name": "autoplay", "default": "NO", "description": "If ``YES``, the stimulus will start playing automatically (as if by an implicit `Play Dynamic Stimulus` action) after it has been `queued <Queue Stimulus>` and `Update Stimulus Display` has been invoked.  It will also stop playing automatically (as if by an implicit `Stop Dynamic Stimulus` action) after it has been `dequeued <Dequeue Stimulus>` and `Update Stimulus Display` is invoked.\n"}], "basename": "drifting_grating_stimulus", "toplevel": true, "group": ["Stimuli"], "allowed_child": []}, "Server-side Event Conduit": {"name": "Server-side Event Conduit", "signature": "iodevice/serverside_conduit", "isa": ["Server-side Event Conduit", "IODevice"], "platform": ["macos"], "description": "A conduit object that allows external programs to request and interact with variables within an MWorks server instance\n", "parameters": [{"name": "resource_name", "default": "server_conduit", "description": "Name that the external program will use to connect to the conduit\n"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "server_side_event_conduit", "toplevel": true, "group": ["Input/Output"], "allowed_child": []}, "RCB-LVDS Device": {"name": "RCB-LVDS Device", "signature": "iodevice/rcb_lvds", "isa": ["RCB-LVDS Device", "IODevice"], "allowed_child": ["RCB-LVDS Digital Input Channel"], "description": "Interface to a DSP Wireless `RCB-LVDS module <http://www.dspwi.com/wifi- interfaces-for-ephys.html>`_\n", "parameters": [{"name": "address", "required": true, "example": ["192.168.1.93", "\"10.0.1.93\""], "description": "Network address (hostname or IP address) of the module"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "rcb_lvds_device", "toplevel": true, "group": ["Input/Output"]}, "RCB-LVDS Digital Input Channel": {"name": "RCB-LVDS Digital Input Channel", "signature": "iochannel/rcb_lvds_digital_input", "isa": ["IOChannel", "RCB-LVDS Digital Input Channel"], "description": "Digital input channel on a `RCB-LVDS Device`.\n\n*Note*: RCB-LVDS digital channels are inputs from the perspective of the\ndevice, in that their values are recorded along with the amplifier channel\ndata and streamed to the recording software.  However, from MWorks'\nperspective, they function as outputs and can be used to add time stamps or\nother information to the RCB-LVDS data stream.\n", "parameters": [{"name": "channel", "required": true, "example": [3, "0,2,6", "1:4", "7,11:13,15"], "description": "Channel number(s) to control via assignment to the variable provided in `value`_.  Each channel number must be between 0 and 15 (inclusive).\n"}, {"name": "value", "required": true, "description": "Variable from which to read channel state.  `Assigning <Assign\nVariable>` a value to the variable causes the channel state to be\nchanged immediately.\n\nThe state value is treated as a multi-bit word.  The least significant\nbit controls the state of the first channel specified in `channel`_ (0\nfor low, 1 for high), the next bit controls the second channel, etc.\n"}], "basename": "rcb_lvds_digital_input_channel", "group": ["Input/Output"], "allowed_child": []}, "Base Frame List Stimulus": {"name": "Base Frame List Stimulus", "abstract": true, "isa": ["Stimulus", "Base Frame List Stimulus", "Dynamic Stimulus Base"], "parameters": [{"name": "ended", "description": "Variable that will be set to true after the last frame has displayed. (Specifically, it will be set to true at the time that the next frame *after* the last would have been drawn, if there were one.)\n"}, {"name": "loop", "default": "NO", "description": "If ``YES``, the presentation will repeat indefinitely (or until `Stop Dynamic Stimulus` is invoked)\n"}, {"name": "repeats", "default": 0, "description": "Number of times to repeat the presentation.  Note that the presentation\nwill always run at least once, even if this value is less than one.\n\nIf `loop`_ is ``YES``, this parameter is ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}, {"name": "autoplay", "default": "NO", "description": "If ``YES``, the stimulus will start playing automatically (as if by an implicit `Play Dynamic Stimulus` action) after it has been `queued <Queue Stimulus>` and `Update Stimulus Display` has been invoked.  It will also stop playing automatically (as if by an implicit `Stop Dynamic Stimulus` action) after it has been `dequeued <Dequeue Stimulus>` and `Update Stimulus Display` is invoked.\n"}], "basename": "base_frame_list_stimulus", "toplevel": true, "group": ["Stimuli"], "allowed_child": []}, "Frame List Stimulus": {"name": "Frame List Stimulus", "signature": "stimulus/frame_list", "isa": ["Stimulus", "Base Frame List Stimulus", "Frame List Stimulus", "Dynamic Stimulus Base"], "allowed_child": ["Replicator", "Stimulus"], "description": "A simple movie stimulus that presents its frames at the native refresh rate of the display.  The frames can be provided by a stimulus group or attached directly to the frame list as child components.\n", "parameters": [{"name": "stimulus_group", "description": "Stimulus group providing the frames"}, {"name": "ending", "description": "Variable that will be set to true when the frame list begins drawing its last frame (thereby notifying you of the optimal time to `queue <Queue Stimulus>`  stimuli that should be displayed during the frame *immediately following* said last frame)\n"}, {"name": "ended", "description": "Variable that will be set to true after the last frame has displayed. (Specifically, it will be set to true at the time that the next frame *after* the last would have been drawn, if there were one.)\n"}, {"name": "loop", "default": "NO", "description": "If ``YES``, the presentation will repeat indefinitely (or until `Stop Dynamic Stimulus` is invoked)\n"}, {"name": "repeats", "default": 0, "description": "Number of times to repeat the presentation.  Note that the presentation\nwill always run at least once, even if this value is less than one.\n\nIf `loop`_ is ``YES``, this parameter is ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}, {"name": "autoplay", "default": "NO", "description": "If ``YES``, the stimulus will start playing automatically (as if by an implicit `Play Dynamic Stimulus` action) after it has been `queued <Queue Stimulus>` and `Update Stimulus Display` has been invoked.  It will also stop playing automatically (as if by an implicit `Stop Dynamic Stimulus` action) after it has been `dequeued <Dequeue Stimulus>` and `Update Stimulus Display` is invoked.\n"}], "basename": "frame_list_stimulus", "toplevel": true, "group": ["Stimuli"]}, "Base Movie Stimulus": {"name": "Base Movie Stimulus", "abstract": true, "isa": ["Base Movie Stimulus", "Stimulus", "Base Frame List Stimulus", "Dynamic Stimulus Base"], "parameters": [{"name": "frames_per_second", "required": true, "description": "Rate at which to display the movie's frames"}, {"name": "ended", "description": "Variable that will be set to true after the last frame has displayed. (Specifically, it will be set to true at the time that the next frame *after* the last would have been drawn, if there were one.)\n"}, {"name": "loop", "default": "NO", "description": "If ``YES``, the presentation will repeat indefinitely (or until `Stop Dynamic Stimulus` is invoked)\n"}, {"name": "repeats", "default": 0, "description": "Number of times to repeat the presentation.  Note that the presentation\nwill always run at least once, even if this value is less than one.\n\nIf `loop`_ is ``YES``, this parameter is ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}, {"name": "autoplay", "default": "NO", "description": "If ``YES``, the stimulus will start playing automatically (as if by an implicit `Play Dynamic Stimulus` action) after it has been `queued <Queue Stimulus>` and `Update Stimulus Display` has been invoked.  It will also stop playing automatically (as if by an implicit `Stop Dynamic Stimulus` action) after it has been `dequeued <Dequeue Stimulus>` and `Update Stimulus Display` is invoked.\n"}], "basename": "base_movie_stimulus", "toplevel": true, "group": ["Stimuli"], "allowed_child": []}, "Movie Stimulus": {"name": "Movie Stimulus", "signature": "stimulus/movie", "isa": ["Base Movie Stimulus", "Base Frame List Stimulus", "Stimulus", "Movie Stimulus", "Dynamic Stimulus Base"], "allowed_child": ["Replicator", "Stimulus"], "description": "A simple movie stimulus that presents its frames at a specified frame rate.\nThe frames can be provided by a stimulus group or attached directly to the\nmovie as child components.\n\n*Note*:  For compatibility with previous MWorks versions, this stimulus\nignores the `deferred`_ parameter.  Instead, the stimulus instance itself is\nmarked as loaded at creation (as if `deferred`_ were ``no``), but it does\nnot automatically load its frame stimuli (as if `deferred`_ were\n``explicit``).  However, explicit `load <Load Stimulus>` and `unload <Unload\nStimulus>` actions *will* load/unload the frames along with the movie\nstimulus itself.\n", "parameters": [{"name": "stimulus_group", "description": "Stimulus group providing the frames"}, {"name": "frames_per_second", "required": true, "description": "Rate at which to display the movie's frames"}, {"name": "ended", "description": "Variable that will be set to true after the last frame has displayed. (Specifically, it will be set to true at the time that the next frame *after* the last would have been drawn, if there were one.)\n"}, {"name": "loop", "default": "NO", "description": "If ``YES``, the presentation will repeat indefinitely (or until `Stop Dynamic Stimulus` is invoked)\n"}, {"name": "repeats", "default": 0, "description": "Number of times to repeat the presentation.  Note that the presentation\nwill always run at least once, even if this value is less than one.\n\nIf `loop`_ is ``YES``, this parameter is ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}, {"name": "autoplay", "default": "NO", "description": "If ``YES``, the stimulus will start playing automatically (as if by an implicit `Play Dynamic Stimulus` action) after it has been `queued <Queue Stimulus>` and `Update Stimulus Display` has been invoked.  It will also stop playing automatically (as if by an implicit `Stop Dynamic Stimulus` action) after it has been `dequeued <Dequeue Stimulus>` and `Update Stimulus Display` is invoked.\n"}], "basename": "movie_stimulus", "toplevel": true, "group": ["Stimuli"]}, "Image Directory Movie Stimulus": {"name": "Image Directory Movie Stimulus", "signature": "stimulus/image_directory_movie", "isa": ["Base Movie Stimulus", "Base Frame List Stimulus", "Stimulus", "Image Directory Movie Stimulus", "Dynamic Stimulus Base"], "description": "A movie stimulus that gets its frames from a directory of image files.\n\n*Note*:  To preserve each image's aspect ratio on screen, `x_size`_ and\n`y_size`_ must be equal.  When drawn, the larger dimension spans the full\nspecified size, while the smaller dimension is scaled to maintain the\naspect ratio.\n", "parameters": [{"name": "directory_path", "required": true, "description": "Filesystem path to the directory containing the image files.\n\n*All* non-hidden files in this directory must be images.  The frames are\nordered according to the lexical sort order of the file names.\n"}, {"name": "x_size", "example": 5.0, "description": "Horizontal size (degrees).\n\nIf omitted, the value of `y_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "y_size", "example": 5.0, "description": "Vertical size (degrees).\n\nIf omitted, the value of `x_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "x_position", "default": 0.0, "description": "Horizontal center position (degrees)"}, {"name": "y_position", "default": 0.0, "description": "Vertical center position (degrees)"}, {"name": "rotation", "default": 0.0, "description": "Rotation (degrees)"}, {"name": "alpha_multiplier", "default": 1.0, "description": "Controls the transparency of the stimulus.  ``1.0`` is fully opaque, while ``0.0`` is fully tranparent.\n"}, {"name": "fullscreen", "default": "NO", "description": "If ``YES``, the stimulus is sized to fill the display.  In this mode, `x_size`_, `y_size`_, `x_position`_, `y_position`_, and `rotation`_ are ignored.\n"}, {"name": "frames_per_second", "required": true, "description": "Rate at which to display the movie's frames"}, {"name": "ended", "description": "Variable that will be set to true after the last frame has displayed. (Specifically, it will be set to true at the time that the next frame *after* the last would have been drawn, if there were one.)\n"}, {"name": "loop", "default": "NO", "description": "If ``YES``, the presentation will repeat indefinitely (or until `Stop Dynamic Stimulus` is invoked)\n"}, {"name": "repeats", "default": 0, "description": "Number of times to repeat the presentation.  Note that the presentation\nwill always run at least once, even if this value is less than one.\n\nIf `loop`_ is ``YES``, this parameter is ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}, {"name": "autoplay", "default": "NO", "description": "If ``YES``, the stimulus will start playing automatically (as if by an implicit `Play Dynamic Stimulus` action) after it has been `queued <Queue Stimulus>` and `Update Stimulus Display` has been invoked.  It will also stop playing automatically (as if by an implicit `Stop Dynamic Stimulus` action) after it has been `dequeued <Dequeue Stimulus>` and `Update Stimulus Display` is invoked.\n"}], "basename": "image_directory_movie_stimulus", "toplevel": true, "group": ["Stimuli"], "allowed_child": []}, "Mouse Input Device": {"name": "Mouse Input Device", "signature": "iodevice/mouse_input", "isa": ["Mouse Input Device", "IODevice"], "platform": ["macos"], "description": "Interface to the system mouse or other pointing device", "parameters": [{"name": "mouse_position_x", "required": true, "description": "Variable in which to store the horizontal position of the pointer (in degrees) on the stimulus display\n"}, {"name": "mouse_position_y", "required": true, "description": "Variable in which to store the vertical position of the pointer (in degrees) on the stimulus display\n"}, {"name": "mouse_down", "description": "Variable in which to store the state of the primary mouse button (true if down/clicked, false if up/released)\n"}, {"name": "hide_cursor", "default": "NO", "description": "If ``YES``, hide the cursor inside the stimulus display window\n"}, {"name": "use_mirror_window", "default": "NO", "description": "If ``YES``, track pointer location on the mirror window instead of the main stimulus display window\n"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "mouse_input_device", "toplevel": true, "group": ["Input/Output"], "allowed_child": []}, "Move Mouse Cursor": {"name": "Move Mouse Cursor", "signature": "action/move_mouse_cursor", "isa": ["Action", "Move Mouse Cursor"], "platform": ["macos"], "description": "Move the mouse cursor to the specified position on the stimulus display\n", "parameters": [{"name": "device", "required": true, "description": "Name of a `Mouse Input Device`"}, {"name": "x_position", "required": true, "description": "Horizontal position (in degrees) to which to move the mouse cursor\n"}, {"name": "y_position", "required": true, "description": "Vertical position (in degrees) to which to move the mouse cursor\n"}], "basename": "move_mouse_cursor", "group": ["Actions"], "allowed_child": []}, "NIDAQ Device": {"name": "NIDAQ Device", "signature": "iodevice/nidaq", "isa": ["IODevice", "NIDAQ Device"], "platform": ["macos"], "allowed_child": ["NIDAQ Channel"], "description": "Interface to a `National Instruments <http://www.ni.com>`_ data acquisition (DAQ) device\n", "parameters": [{"name": "name", "required": true, "example": "Dev1", "description": "Device name.\n\nRun ``/Applications/National Instruments/NI-DAQmx Base/lsdaq.app`` to\ndetect available devices and determine their assigned names.\n"}, {"name": "update_interval", "required": true, "example": "3ms", "description": "MWorks will poll the device for new input data every ``update_interval`` microseconds\n"}, {"name": "analog_input_data_interval", "required": true, "example": "1ms", "description": "Interval between acquired samples on analog input channels (microseconds)\n"}, {"name": "analog_output_data_interval", "required": true, "example": "1ms", "description": "Interval between generated samples on analog output channels (microseconds)\n"}, {"name": "analog_read_timeout", "example": "3ms", "description": "Maximum time to wait for a single update's worth of analog input samples\n(microseconds).  If the samples are not received in the allotted time,\nissue an error message.\n\nIf omitted, defaults to `update_interval`_.\n"}, {"name": "analog_output_enabled", "default": "YES", "description": "Controls whether the device performs output on configured analog\noutput `voltage <NIDAQ Analog Output Voltage Channel>` and\n`voltage waveform <NIDAQ Analog Output Voltage Waveform Channel>`\nchannels.\n\nIf this parameter is set to a variable name, then setting the variable\nto ``NO`` while the experiment is running will stop analog output, and\nsubsequently setting the variable to ``YES`` will restart analog output.\nHence, it provides a means to start and stop analog output independently\nof other input and output tasks.\n"}, {"name": "assume_multiplexed_adc", "default": "YES", "description": "If ``YES``, MWorks assumes that all analog input channels share a single analog-to-digital converter (ADC) and adjusts sample timestamps accordingly.  If ``NO``, MWorks assumes that each analog input channel has its own ADC and that samples for all channels are acquired simultaneously.\n"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "nidaq_device", "toplevel": true, "group": ["Input/Output"]}, "NIDAQ Channel": {"name": "NIDAQ Channel", "abstract": true, "isa": ["NIDAQ Channel", "IOChannel"], "platform": ["macos"], "basename": "nidaq_channel", "group": ["Input/Output"], "allowed_child": []}, "NIDAQ Analog Input Voltage Channel": {"name": "NIDAQ Analog Input Voltage Channel", "signature": "iochannel/nidaq_analog_input_voltage", "isa": ["NIDAQ Channel", "IOChannel", "NIDAQ Analog Input Voltage Channel"], "description": "Analog input voltage channel on a `NIDAQ Device`", "parameters": [{"name": "channel_number", "required": true, "example": 0, "description": "Analog input channel number (``0`` for AI0, ``1`` for AI1, etc.)\n"}, {"name": "range_min", "required": true, "example": -10.0, "description": "Minimum expected input value (volts)"}, {"name": "range_max", "required": true, "example": 10.0, "description": "Maximum expected input value (volts)"}, {"name": "voltage", "required": true, "description": "Variable in which to store input voltage values"}], "basename": "nidaq_analog_input_voltage_channel", "group": ["Input/Output"], "allowed_child": [], "platform": ["macos"]}, "NIDAQ Analog Output Voltage Channel": {"name": "NIDAQ Analog Output Voltage Channel", "signature": "iochannel/nidaq_analog_output_voltage", "isa": ["NIDAQ Analog Output Voltage Channel", "IOChannel", "NIDAQ Channel"], "description": "Analog output voltage channel on a `NIDAQ Device`", "parameters": [{"name": "channel_number", "required": true, "example": 0, "description": "Analog output channel number (``0`` for AO0, ``1`` for AO1, etc.)\n"}, {"name": "range_min", "required": true, "example": -10.0, "description": "Minimum permitted output value (volts)"}, {"name": "range_max", "required": true, "example": 10.0, "description": "Maximum permitted output value (volts)"}, {"name": "voltage", "required": true, "description": "Variable from which to read output voltage values.  `Assigning <Assign Variable>` a value to the variable causes the output voltage to be changed immediately.\n"}], "basename": "nidaq_analog_output_voltage_channel", "group": ["Input/Output"], "allowed_child": [], "platform": ["macos"]}, "NIDAQ Analog Output Voltage Waveform Channel": {"name": "NIDAQ Analog Output Voltage Waveform Channel", "signature": "iochannel/nidaq_analog_output_voltage_waveform", "isa": ["NIDAQ Analog Output Voltage Waveform Channel", "IOChannel", "NIDAQ Channel"], "description": "Generates a periodic analog output voltage signal on a `NIDAQ Device`.\n\nAll waveform parameters (`waveform`_, `period`_, `offset`_, `amplitude`_,\nand `mean`_) can be modified at run time.  Changes take effect after output\nis stopped and restarted, either by `stopping <Stop IO Device>` and\n`restarting <Start IO Device>` the device, or by setting the device's\n``analog_output_enabled`` parameter to ``NO`` and then ``YES``.\n", "parameters": [{"name": "channel_number", "required": true, "example": 0, "description": "Analog output channel number (``0`` for AO0, ``1`` for AO1, etc.)\n"}, {"name": "range_min", "required": true, "example": -10.0, "description": "Minimum permitted output value (volts)"}, {"name": "range_max", "required": true, "example": 10.0, "description": "Maximum permitted output value (volts)"}, {"name": "waveform", "required": true, "options": ["sinusoid", "square", "triangle", "sawtooth"], "description": "Waveform type"}, {"name": "period", "required": true, "example": "500ms", "description": "Waveform period (microseconds)"}, {"name": "offset", "default": "0ms", "description": "Waveform time offset (microseconds).  Determines the initial phase of the waveform.\n"}, {"name": "amplitude", "example": 2.5, "description": "Waveform amplitude (volts).  If omitted, defaults to ``(range_max-range_min)/2``.\n"}, {"name": "mean", "example": 5.0, "description": "Waveform mean (volts).  If omitted, defaults to\n``(range_min+range_max)/2``.\n"}], "basename": "nidaq_analog_output_voltage_waveform_channel", "group": ["Input/Output"], "allowed_child": [], "platform": ["macos"]}, "NIDAQ Digital Channel": {"name": "NIDAQ Digital Channel", "abstract": true, "isa": ["NIDAQ Channel", "IOChannel", "NIDAQ Digital Channel"], "parameters": [{"name": "port_number", "required": true, "example": 0, "description": "Digital port number (``0`` for P0, ``1`` for P1, etc.)"}, {"name": "num_lines_in_port", "required": true, "example": 8, "description": "Number of lines in the port.  Typical values are 4, 8, 16, and 32.\n"}, {"name": "line0"}, {"name": "line1"}, {"name": "line2"}, {"name": "line3"}, {"name": "line4"}, {"name": "line5"}, {"name": "line6"}, {"name": "line7"}, {"name": "line8"}, {"name": "line9"}, {"name": "line10"}, {"name": "line11"}, {"name": "line12"}, {"name": "line13"}, {"name": "line14"}, {"name": "line15"}, {"name": "line16"}, {"name": "line17"}, {"name": "line18"}, {"name": "line19"}, {"name": "line20"}, {"name": "line21"}, {"name": "line22"}, {"name": "line23"}, {"name": "line24"}, {"name": "line25"}, {"name": "line26"}, {"name": "line27"}, {"name": "line28"}, {"name": "line29"}, {"name": "line30"}, {"name": "line31"}], "basename": "nidaq_digital_channel", "group": ["Input/Output"], "allowed_child": [], "platform": ["macos"]}, "NIDAQ Digital Input Channel": {"name": "NIDAQ Digital Input Channel", "signature": "iochannel/nidaq_digital_input", "isa": ["NIDAQ Channel", "IOChannel", "NIDAQ Digital Input Channel", "NIDAQ Digital Channel"], "description": "Digital input channel on a `NIDAQ Device`.\n\nSupports up to 32 lines on a single port.  Each line has an associated\nparameter (e.g. `line0`_) that specifies the variable in which to store the\nstate of the line (0 or 1).\n", "basename": "nidaq_digital_input_channel", "group": ["Input/Output"], "allowed_child": [], "platform": ["macos"], "parameters": [{"name": "port_number", "required": true, "example": 0, "description": "Digital port number (``0`` for P0, ``1`` for P1, etc.)"}, {"name": "num_lines_in_port", "required": true, "example": 8, "description": "Number of lines in the port.  Typical values are 4, 8, 16, and 32.\n"}, {"name": "line0"}, {"name": "line1"}, {"name": "line2"}, {"name": "line3"}, {"name": "line4"}, {"name": "line5"}, {"name": "line6"}, {"name": "line7"}, {"name": "line8"}, {"name": "line9"}, {"name": "line10"}, {"name": "line11"}, {"name": "line12"}, {"name": "line13"}, {"name": "line14"}, {"name": "line15"}, {"name": "line16"}, {"name": "line17"}, {"name": "line18"}, {"name": "line19"}, {"name": "line20"}, {"name": "line21"}, {"name": "line22"}, {"name": "line23"}, {"name": "line24"}, {"name": "line25"}, {"name": "line26"}, {"name": "line27"}, {"name": "line28"}, {"name": "line29"}, {"name": "line30"}, {"name": "line31"}]}, "NIDAQ Digital Output Channel": {"name": "NIDAQ Digital Output Channel", "signature": "iochannel/nidaq_digital_output", "isa": ["NIDAQ Digital Output Channel", "IOChannel", "NIDAQ Channel", "NIDAQ Digital Channel"], "description": "Digital output channel on a `NIDAQ Device`.\n\nSupports up to 32 lines on a single port.  Each line has an associated\nparameter (e.g. `line0`_) that specifies the variable from which to read the\nstate of the line (0 or 1).  `Assigning <Assign Variable>` a value to the\nvariable causes the line's state to be changed immediately.\n\nAlso supports multi-bit word output via the `word`_ and `word_lines`_\nparameters.\n", "parameters": [{"name": "word", "description": "Variable from which to read multi-bit output words.  `Assigning <Assign Variable>` a value to the variable causes the state of the lines specified in `word_lines`_ to be changed immediately.\n"}, {"name": "word_lines", "example": ["1,2,3", "4:7", "1,4:6,7"], "description": "Lines used to output the individual bits of multi-bit words. The first\nline receives the least significant bit, the last line the most\nsignificant.\n\nLines used for word output cannot also be controlled independently.\nAttempting to assign a value to the parameter associated with a line\nnumber included here will generate a warning.\n"}, {"name": "port_number", "required": true, "example": 0, "description": "Digital port number (``0`` for P0, ``1`` for P1, etc.)"}, {"name": "num_lines_in_port", "required": true, "example": 8, "description": "Number of lines in the port.  Typical values are 4, 8, 16, and 32.\n"}, {"name": "line0"}, {"name": "line1"}, {"name": "line2"}, {"name": "line3"}, {"name": "line4"}, {"name": "line5"}, {"name": "line6"}, {"name": "line7"}, {"name": "line8"}, {"name": "line9"}, {"name": "line10"}, {"name": "line11"}, {"name": "line12"}, {"name": "line13"}, {"name": "line14"}, {"name": "line15"}, {"name": "line16"}, {"name": "line17"}, {"name": "line18"}, {"name": "line19"}, {"name": "line20"}, {"name": "line21"}, {"name": "line22"}, {"name": "line23"}, {"name": "line24"}, {"name": "line25"}, {"name": "line26"}, {"name": "line27"}, {"name": "line28"}, {"name": "line29"}, {"name": "line30"}, {"name": "line31"}], "basename": "nidaq_digital_output_channel", "group": ["Input/Output"], "allowed_child": [], "platform": ["macos"]}, "NIDAQ Counter Input Count Edges Channel": {"name": "NIDAQ Counter Input Count Edges Channel", "signature": "iochannel/nidaq_counter_input_count_edges", "isa": ["NIDAQ Channel", "IOChannel", "NIDAQ Counter Input Count Edges Channel"], "description": "Counts falling edges detected on the specified counter input on a `NIDAQ Device`\n", "parameters": [{"name": "counter_number", "required": true, "example": 0, "description": "Counter number (``0`` for CTR0, ``1`` for CTR1, etc.)"}, {"name": "count", "required": true, "description": "Variable in which to store edge counts"}], "basename": "nidaq_counter_input_count_edges_channel", "group": ["Input/Output"], "allowed_child": [], "platform": ["macos"]}, "EasyEye Device": {"name": "EasyEye Device", "signature": "iodevice/easy_eye", "isa": ["EasyEye Device", "IODevice"], "description": "Interface to an EasyEye eye tracker", "parameters": [{"name": "address", "required": true, "example": ["localhost", "\"mytracker.mylab.net\"", "18.9.22.69"], "description": "Tracker host name or IP address"}, {"name": "port", "required": true, "example": 5204, "description": "Tracker listening port"}, {"name": "eye_x", "required": true, "description": "Variable in which to store horizontal eye position"}, {"name": "eye_y", "required": true, "description": "Variable in which to store vertical eye position"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "easyeye_device", "toplevel": true, "group": ["Input/Output"], "allowed_child": []}, "ITC-18 IO Device": {"name": "ITC-18 IO Device", "signature": "iodevice/itc18", "isa": ["ITC-18 IO Device", "IODevice"], "platform": ["macos"], "allowed_child": ["ITC-18 Channel"], "description": "Interface to an `ITC-18 <http://heka.com/products/products_main.html#acq_itc18>`_ data acquisition unit\n", "basename": "itc_18_io_device", "toplevel": true, "group": ["Input/Output"], "parameters": [{"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}]}, "ITC-18 Channel": {"name": "ITC-18 Channel", "abstract": true, "isa": ["ITC-18 Channel", "IOChannel"], "platform": ["macos"], "basename": "itc_18_channel", "group": ["Input/Output"], "allowed_child": []}, "ITC-18 Analog Input Channel": {"name": "ITC-18 Analog Input Channel", "signature": "iochannel/itc18_analog_input", "isa": ["ITC-18 Channel", "ITC-18 Analog Input Channel", "IOChannel"], "description": "Used for interfacing to an analog input channel on an `ITC-18 IO Device`\n", "parameters": [{"name": "variable", "required": true}, {"name": "capability", "required": true, "example": "ITC18_ADC_INPUT0"}, {"name": "data_type", "required": true, "example": "analog"}, {"name": "direction", "required": true, "example": "input"}, {"name": "synchrony", "required": true, "example": "hardware_timed_synchronous"}, {"name": "range_min", "required": true, "example": -10}, {"name": "range_max", "required": true, "example": 10}, {"name": "resolution", "required": true, "example": 16}, {"name": "update_interval", "required": true, "example": "3ms"}, {"name": "data_interval", "required": true, "example": "1ms"}], "basename": "itc_18_analog_input_channel", "group": ["Input/Output"], "allowed_child": [], "platform": ["macos"]}, "ITC-18 TTL Input Channel": {"name": "ITC-18 TTL Input Channel", "signature": "iochannel/itc18_ttl_digital_input", "isa": ["ITC-18 Channel", "ITC-18 TTL Input Channel", "IOChannel"], "description": "Used for interfacing to a TTL input channel on an `ITC-18 IO Device`\n", "parameters": [{"name": "variable", "required": true}, {"name": "capability", "required": true, "example": "ITC18_TTL_INPUT0"}, {"name": "data_type", "required": true, "options": ["edge_low_to_high", "edge_high_to_low", "edge_any", "digital"], "description": "Data type.  ``digital`` indicates continuous digital data.\n"}, {"name": "direction", "required": true, "example": "input"}, {"name": "synchrony", "required": true, "example": "hardware_timed_synchronous"}, {"name": "range_min", "required": true, "example": 0}, {"name": "range_max", "required": true, "example": 0}, {"name": "resolution", "required": true, "example": 1}, {"name": "update_interval", "required": true, "example": "3ms"}, {"name": "data_interval", "required": true, "example": "0.5ms"}], "basename": "itc_18_ttl_input_channel", "group": ["Input/Output"], "allowed_child": [], "platform": ["macos"]}, "ITC-18 AUX TTL Output Channel": {"name": "ITC-18 AUX TTL Output Channel", "signature": "iochannel/itc18_async_ttl_digital_output", "isa": ["ITC-18 Channel", "ITC-18 AUX TTL Output Channel", "IOChannel"], "description": "Used for interfacing to an asynchronous auxiliary TTL output channel on an `ITC-18 IO Device`\n", "parameters": [{"name": "variable", "required": true}, {"name": "capability", "required": true, "example": "ITC18_TTL_ASYCH_OUT00"}, {"name": "data_type", "required": true, "options": ["digital", "pulse_active_high", "pulse_active_low", "digital_uint8"]}, {"name": "direction", "required": true, "example": "output"}, {"name": "synchrony", "required": true, "example": "asynchronous"}, {"name": "range_min", "required": true, "example": 0}, {"name": "range_max", "required": true, "example": 0}, {"name": "resolution", "required": true, "example": 1}, {"name": "update_interval", "required": true, "example": "3ms"}, {"name": "data_interval", "required": true, "example": "1ms"}], "basename": "itc_18_aux_ttl_output_channel", "group": ["Input/Output"], "allowed_child": [], "platform": ["macos"]}, "ITC-18 Triggered Analog Snippet": {"name": "ITC-18 Triggered Analog Snippet", "signature": "iochannel/itc18_triggered_analog_snippet", "isa": ["ITC-18 Channel", "ITC-18 Triggered Analog Snippet", "IOChannel"], "description": "Used for recording an analog snippet on an `ITC-18 IO Device`.  A TTL channel is used to trigger the snippet.\n", "parameters": [{"name": "variable", "required": true}, {"name": "capability", "required": true, "example": "ITC18_ADC_INPUT0"}, {"name": "data_type", "required": true, "example": "triggered_analog_snippet"}, {"name": "direction", "required": true, "example": "output"}, {"name": "synchrony", "required": true, "example": "hardware_timed_synchronous"}, {"name": "range_min", "required": true, "example": -10}, {"name": "range_max", "required": true, "example": 10}, {"name": "resolution", "required": true, "example": 16}, {"name": "update_interval", "required": true, "example": "3ms"}, {"name": "data_interval", "required": true, "example": "70us"}, {"name": "TTL_trigger_port", "required": true, "example": 0}, {"name": "pre_trigger_interval", "required": true, "example": "4ms"}, {"name": "post_trigger_interval", "required": true, "example": "4ms"}], "basename": "itc_18_triggered_analog_snippet", "group": ["Input/Output"], "allowed_child": [], "platform": ["macos"]}, "ITC-18 Word Output Channel": {"name": "ITC-18 Word Output Channel", "signature": "iochannel/itc18_word_output", "isa": ["ITC-18 Word Output Channel", "ITC-18 Channel", "IOChannel"], "description": "Used for sending word output on an `ITC-18 IO Device` (e.g. to a `Plexon <http://www.plexon.com>`_ system for clock synchronization)\n", "parameters": [{"name": "variable", "required": true}, {"name": "capability", "required": true, "example": "ITC18_TTL_AUX_WORD1"}, {"name": "data_type", "required": true, "example": "digital_uint8"}, {"name": "direction", "required": true, "example": "output"}, {"name": "synchrony", "required": true, "example": "asynchronous"}, {"name": "range_min", "required": true, "example": 0}, {"name": "range_max", "required": true, "example": 0}, {"name": "resolution", "required": true, "example": 1}, {"name": "update_interval", "required": true, "example": "3ms"}, {"name": "data_interval", "required": true, "example": "1ms"}], "basename": "itc_18_word_output_channel", "group": ["Input/Output"], "allowed_child": [], "platform": ["macos"]}, "Video Stimulus": {"name": "Video Stimulus", "signature": "stimulus/video", "isa": ["Basic Transform Stimulus", "Video Stimulus", "Stimulus", "Transform Stimulus", "Dynamic Stimulus Base"], "description": "A stimulus that plays a video stored in any `video file format\n<https://en.wikipedia.org/wiki/Video_file_format>`_ supported by the\noperating system.\n\n*Note*:  To preserve the video's aspect ratio on screen, `x_size`_ and\n`y_size`_ must be equal.  When drawn, the larger dimension spans the full\nspecified size, while the smaller dimension is scaled to maintain the\naspect ratio.\n", "parameters": [{"name": "path", "required": true, "description": "Filesystem path to the video file"}, {"name": "volume", "default": 0.0, "description": "Output audio volume (floating-point value between 0 and 1, where 0 is muted and 1 is full system volume)\n"}, {"name": "loop", "default": "NO", "description": "If ``YES``, the video will repeat indefinitely (or until `Stop Dynamic Stimulus` is invoked)\n"}, {"name": "repeats", "default": 0, "description": "Number of times to repeat the video.  Note that the video will always\nplay at least once, even if this value is less than one.\n\nIf `loop`_ is ``YES``, this parameter is ignored.\n"}, {"name": "ended", "description": "Variable that will be set to true after the video ends.  If `repeats`_ is greater than 1, the variable will be set only once, after all repetitions are complete.  If `loop`_ is ``YES``, the variable will never be set.\n"}, {"name": "alpha_multiplier", "default": 1.0, "description": "Controls the transparency of the stimulus.  ``1.0`` is fully opaque, while ``0.0`` is fully tranparent.\n"}, {"name": "x_size", "example": 5.0, "description": "Horizontal size (degrees).\n\nIf omitted, the value of `y_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "y_size", "example": 5.0, "description": "Vertical size (degrees).\n\nIf omitted, the value of `x_size`_ is used.  It is an error to omit both\nx_size and y_size (unless `fullscreen`_ is ``YES``).\n"}, {"name": "x_position", "default": 0.0, "description": "Horizontal center position (degrees)"}, {"name": "y_position", "default": 0.0, "description": "Vertical center position (degrees)"}, {"name": "rotation", "default": 0.0, "description": "Rotation (degrees)"}, {"name": "fullscreen", "default": "NO", "description": "If ``YES``, the stimulus is sized to fill the display.  In this mode, `x_size`_, `y_size`_, `x_position`_, `y_position`_, and `rotation`_ are ignored.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}, {"name": "autoplay", "default": "NO", "description": "If ``YES``, the stimulus will start playing automatically (as if by an implicit `Play Dynamic Stimulus` action) after it has been `queued <Queue Stimulus>` and `Update Stimulus Display` has been invoked.  It will also stop playing automatically (as if by an implicit `Stop Dynamic Stimulus` action) after it has been `dequeued <Dequeue Stimulus>` and `Update Stimulus Display` is invoked.\n"}], "basename": "video_stimulus", "toplevel": true, "group": ["Stimuli"], "allowed_child": []}, "Moving Dots": {"name": "Moving Dots", "signature": "stimulus/moving_dots", "isa": ["Stimulus", "Moving Dots", "Dynamic Stimulus Base"], "description": "A moving dot field stimulus", "parameters": [{"name": "field_radius", "required": true, "description": "Field radius (degrees)"}, {"name": "field_center_x", "default": 0.0, "description": "Field horizontal center position (degrees)"}, {"name": "field_center_y", "default": 0.0, "description": "Field vertical center position (degrees)"}, {"name": "dot_density", "required": true, "description": "Number of dots per square degree"}, {"name": "dot_size", "required": true, "description": "Dot diameter (degrees)"}, {"name": "color", "default": "1.0,1.0,1.0", "description": "Dot color, expressed as a comma-separated list of red, green, and blue components.  Each component may be described by any valid expression, but the expression must result in a value between 0 and 1 (inclusive).\n"}, {"name": "alpha_multiplier", "default": 1.0, "description": "Controls the transparency of the dots.  ``1.0`` is fully opaque, while ``0.0`` is fully tranparent.\n"}, {"name": "direction", "default": 0.0, "description": "Direction of movement for coherent dots (degrees)"}, {"name": "speed", "required": true, "description": "Dot speed (degrees per second)"}, {"name": "coherence", "default": 1.0, "description": "Fraction of dots that move in the specified `direction`_.  Non-coherent dots receive random directions.\n"}, {"name": "lifetime", "default": 0.0, "description": "Dot lifetime (seconds).  When a dot reaches the end of its lifetime, it is removed and replaced by a new dot in a random location.\n"}, {"name": "announce_dots", "default": "NO", "description": "If ``YES``, stimulus announcements (i.e. ``#announceStimulus`` and\n``#stimDisplayUpdate`` events) will include dot positions.\n\nPosition data is encoded as a binary array of single-precision floating\npoint values (in platform `byte order\n<https://en.wikipedia.org/wiki/Endianness>`_), with each consecutive\npair of values representing the (x,y) coordinates of a dot.  The\ncoordinates are scaled to lie in the range [-1,1] and rotated so that\nthe direction of coherent motion is zero degrees.\n"}, {"name": "rand_seed", "description": "Seed value for the random number generator.  If omitted, the current system time in nanoseconds is used.\n"}, {"name": "deferred", "options": ["no", "yes", "explicit"], "default": "no", "description": "Controls when the stimulus is loaded.  If ``no``, the stimulus is loaded at experiment load time.  If ``yes``, the stimulus is loaded the first time it is `queued <Queue Stimulus>`.  If ``explicit``, the stimulus must be loaded explictly with `Load Stimulus`.\n"}, {"name": "autoplay", "default": "NO", "description": "If ``YES``, the stimulus will start playing automatically (as if by an implicit `Play Dynamic Stimulus` action) after it has been `queued <Queue Stimulus>` and `Update Stimulus Display` has been invoked.  It will also stop playing automatically (as if by an implicit `Stop Dynamic Stimulus` action) after it has been `dequeued <Dequeue Stimulus>` and `Update Stimulus Display` is invoked.\n"}], "basename": "moving_dots", "toplevel": true, "group": ["Stimuli"], "allowed_child": []}, "USB HID Device": {"name": "USB HID Device", "signature": "iodevice/usbhid_generic", "isa": ["USB HID Device", "IODevice"], "platform": ["macos"], "allowed_child": ["USB HID Input Channel"], "description": "Interface to a `USB human interface device\n<https://en.wikipedia.org/wiki/USB_human_interface_device_class>`_ (HID)\nclass device.\n\nAppropriate values for the `usage_page`_ and `usage`_ parameters can be\nfound in the `HID Usage Tables\n<http://www.usb.org/developers/hidpage#HID_Usage>`_.  Here are the values\nfor a few common device types:\n\n=========== ========== =====\nDevice type Usage page Usage\n=========== ========== =====\nKeyboard    1          6\nJoystick    1          4\nGamepad     1          5\n=========== ========== =====\n", "parameters": [{"name": "usage_page", "required": true, "example": 1, "description": "HID usage page for the device"}, {"name": "usage", "required": true, "example": 6, "description": "HID usage for the device"}, {"name": "preferred_location_id", "default": 0, "description": "If MWorks finds multiple candidate devices for the given `usage_page`_ and `usage`_, it will issue an error message that lists the product name, manufacturer name, and \"location ID\" for each matching device.  To select the desired device, set this parameter to the reported location ID of that device.\n"}, {"name": "log_all_input_values", "default": "NO", "description": "If ``YES``, MWorks will log (to the event stream and server console) all input values received from the device.  Each log message will include an associated element usage page and usage.  These usage page and usage values can be used to define a `USB HID Input Channel` for the input.\n"}, {"name": "autostart", "default": "NO", "description": "If ``YES``, the device will start I/O automatically (as if by an\nimplicit `Start IO Device` action) when the experiment starts running.\n\n*Note*: Device I/O will always stop automatically when the experiment\nstops running, irrespective of this setting.\n"}, {"name": "alt", "description": "Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.\n"}], "basename": "usb_hid_device", "toplevel": true, "group": ["Input/Output"]}, "USB HID Input Channel": {"name": "USB HID Input Channel", "signature": "iochannel/usbhid_generic_input_channel", "isa": ["IOChannel", "USB HID Input Channel"], "platform": ["macos"], "description": "Input channel on a `USB HID Device`.  Typically, a channel corresponds to a\nspecific input (e.g. key, button, joystick axis) on the device.\n\nAppropriate values for the `usage_page`_ and `usage`_ parameters can be\nfound in the `HID Usage Tables\n<http://www.usb.org/developers/hidpage#HID_Usage>`_.  However, in many\ncases, an easier method for determining the correct values is to set the\ndevice's ``log_all_input_values`` parameter to ``YES``, exercise the\ninput(s) of interest, and record the usage page and usage values reported in\nthe corresponding log messages.\n", "parameters": [{"name": "usage_page", "required": true, "example": 7, "description": "HID usage page for the input"}, {"name": "usage", "required": true, "example": 44, "description": "HID usage for the input"}, {"name": "value", "required": true, "description": "Variable in which to store values received from the input.  Input values are always converted to an integer representation before being stored.\n"}], "basename": "usb_hid_input_channel", "group": ["Input/Output"], "allowed_child": []}}